[{"/Users/kudouhayato/Desktop/project/new_blog_ts/src/reportWebVitals.ts":"1","/Users/kudouhayato/Desktop/project/new_blog_ts/src/index.tsx":"2","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Login.js":"3","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Register.js":"4","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Auth.js":"5","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/header.js":"6","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/SideList.js":"7","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/top.js":"8","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/Main.js":"9","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/User.js":"10","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/TabPanel.js":"11","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Reset.js":"12","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/contact.js":"13","/Users/kudouhayato/Desktop/project/new_blog_ts/src/common.js":"14","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/regularExpression.tsx":"15","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/rightSideList.js":"16","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/sns.js":"17","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/radioComponent.tsx":"18","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/programGenerate.tsx":"19","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/breadcrumb.jsx":"20","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/top.js":"21","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/portfolio.jsx":"22","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/post.jsx":"23","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/detailsComponent.tsx":"24","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/tooltipComponent.tsx":"25","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/game.jsx":"26","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/resultComponent.tsx":"27","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/codeComponent.tsx":"28","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/blog/react_unity.jsx":"29","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/blog/reactUnity_sample.jsx":"30","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/blog/top.jsx":"31","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/checkboxComponent.tsx":"32","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/tableComponent.tsx":"33","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/source_code.tsx":"34","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/admin.jsx":"35"},{"size":425,"mtime":1612234072084,"results":"36","hashOfConfig":"37"},{"size":527,"mtime":1612538994015,"results":"38","hashOfConfig":"37"},{"size":5206,"mtime":1612862289352,"results":"39","hashOfConfig":"37"},{"size":6746,"mtime":1612710177908,"results":"40","hashOfConfig":"37"},{"size":210,"mtime":1612234367341,"results":"41","hashOfConfig":"37"},{"size":10168,"mtime":1612883625480,"results":"42","hashOfConfig":"37"},{"size":4474,"mtime":1612878203008,"results":"43","hashOfConfig":"37"},{"size":3238,"mtime":1612864107086,"results":"44","hashOfConfig":"37"},{"size":3129,"mtime":1612885052072,"results":"45","hashOfConfig":"37"},{"size":705,"mtime":1612234367352,"results":"46","hashOfConfig":"37"},{"size":391,"mtime":1612234367362,"results":"47","hashOfConfig":"37"},{"size":5263,"mtime":1612234367350,"results":"48","hashOfConfig":"37"},{"size":4717,"mtime":1612785270462,"results":"49","hashOfConfig":"37"},{"size":1235,"mtime":1612861056126,"results":"50","hashOfConfig":"37"},{"size":26661,"mtime":1612875428598,"results":"51","hashOfConfig":"37"},{"size":391,"mtime":1612532550128,"results":"52","hashOfConfig":"37"},{"size":1268,"mtime":1612876480030,"results":"53","hashOfConfig":"37"},{"size":875,"mtime":1612235063920,"results":"54","hashOfConfig":"37"},{"size":37818,"mtime":1612785065552,"results":"55","hashOfConfig":"37"},{"size":2836,"mtime":1612864819407,"results":"56","hashOfConfig":"37"},{"size":3897,"mtime":1612872674521,"results":"57","hashOfConfig":"37"},{"size":1720,"mtime":1612600091530,"results":"58","hashOfConfig":"37"},{"size":4180,"mtime":1612883390427,"results":"59","hashOfConfig":"37"},{"size":1002,"mtime":1612235063434,"results":"60","hashOfConfig":"37"},{"size":660,"mtime":1612768493943,"results":"61","hashOfConfig":"37"},{"size":279,"mtime":1612599603405,"results":"62","hashOfConfig":"37"},{"size":5294,"mtime":1612769427349,"results":"63","hashOfConfig":"37"},{"size":1528,"mtime":1612772928783,"results":"64","hashOfConfig":"37"},{"size":6571,"mtime":1612872759752,"results":"65","hashOfConfig":"37"},{"size":1869,"mtime":1612872709128,"results":"66","hashOfConfig":"37"},{"size":2732,"mtime":1612863773327,"results":"67","hashOfConfig":"37"},{"size":893,"mtime":1612235063541,"results":"68","hashOfConfig":"37"},{"size":1833,"mtime":1612235063656,"results":"69","hashOfConfig":"37"},{"size":3032,"mtime":1612457275535,"results":"70","hashOfConfig":"37"},{"size":762,"mtime":1612883384808,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7tq26h",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"87"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"121"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kudouhayato/Desktop/project/new_blog_ts/src/reportWebVitals.ts",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/index.tsx",[],["169","170"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Login.js",["171","172"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useForm } from \"react-hook-form\";\nimport User from './User';\nimport { serverUrl, copyright } from '../../common';\nimport Header from '../parts/header';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n\treturn (\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t{'Copyright © '}\n\t\t\t<Link color=\"inherit\" href=\"https://material-ui.com/\">\n                {copyright}\n            </Link>{' '}\n\t\t\t{new Date().getFullYear()}\n\t\t\t{'.'}\n\t\t</Typography>\n\t);\n}\n\nconst useStyles = makeStyles((theme) => ({\n\tpaper: {\n\t\tmarginTop: theme.spacing(8),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center',\n\t},\n\tavatar: {\n\t\tmargin: theme.spacing(1),\n\t\tbackgroundColor: theme.palette.secondary.main,\n\t},\n\tform: {\n\t\twidth: '100%', // Fix IE 11 issue.\n\t\tmarginTop: theme.spacing(1),\n\t},\n\tsubmit: {\n\t\tmargin: theme.spacing(3, 0, 2),\n\t},\n}));\n\nexport default function Login() {\n\n    const history = useHistory();\n\tconst classes = useStyles();\n    const { register, handleSubmit, errors } = useForm();\n    const [error, set_error] = useState('');\n\n    function setLogin(argument) {\n        var data = {\n            email: argument.email,\n            password: argument.password,\n        }\n        fetch(serverUrl + '/api/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        })\n        .then(response => {\n            if (!response.ok) {\n                set_error('ユーザーが見つかりません');\n            } else {\n                return response.json().then(userInfo => {\n                    if('errors' in userInfo){\n                        set_error(userInfo.errors);\n                    } else {\n                        User.setArr('user', userInfo.user);\n                        User.login();\n                        history.push('/', {articles: userInfo.articles});\n                    }\n                });\n            }\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n\treturn (\n        <div>\n            {/* <Header /> */}\n    \t\t<Container component=\"main\" maxWidth=\"xs\">\n    \t\t\t<CssBaseline />\n    \t\t\t<div className={classes.paper}>\n    \t\t\t\t<Avatar className={classes.avatar}>\n    \t\t\t\t\t<LockOutlinedIcon />\n    \t\t\t\t</Avatar>\n    \t\t\t\t<Typography component=\"h1\" variant=\"h5\">ログイン</Typography>\n                    {error !== '' && (\n                        <Typography color=\"error\">{error}</Typography>\n                    )}\n    \t\t\t\t<form onSubmit={handleSubmit(setLogin)} className=\"player_name_form\">\n    \t\t\t\t\t<TextField\n    \t\t\t\t\t\tvariant=\"outlined\"\n    \t\t\t\t\t\tmargin=\"normal\"\n    \t\t\t\t\t\trequired\n    \t\t\t\t\t\tfullWidth\n    \t\t\t\t\t\tid=\"email\"\n    \t\t\t\t\t\tlabel=\"メールアドレス\"\n    \t\t\t\t\t\tname=\"email\"\n    \t\t\t\t\t\tautoComplete=\"email\"\n    \t\t\t\t\t\tautoFocus\n    \t\t\t\t\t\terror={errors.email || error !== '' ? true : false}\n    \t\t\t\t\t\tinputRef={register({ required: true })}\n    \t\t\t\t\t\thelperText={\n    \t\t\t\t\t\t\terrors.email && <span>メールアドレスを入力してください。</span>\n    \t\t\t\t\t\t}\n    \t\t\t\t\t/>\n    \t\t\t\t\t<TextField\n    \t\t\t\t\t\tvariant=\"outlined\"\n    \t\t\t\t\t\tmargin=\"normal\"\n    \t\t\t\t\t\trequired\n    \t\t\t\t\t\tfullWidth\n    \t\t\t\t\t\tname=\"password\"\n    \t\t\t\t\t\tlabel=\"パスワード\"\n    \t\t\t\t\t\ttype=\"password\"\n    \t\t\t\t\t\tid=\"password\"\n    \t\t\t\t\t\tautoComplete=\"current-password\"\n    \t\t\t\t\t\terror={errors.password || error !== '' ? true : false}\n    \t\t\t\t\t\tinputRef={register({ required: true })}\n    \t\t\t\t\t\thelperText={\n    \t\t\t\t\t\t\terrors.password && <span>メールアドレスを入力してください。</span>\n    \t\t\t\t\t\t}\n    \t\t\t\t\t/>\n    \t\t\t\t\t<FormControlLabel\n    \t\t\t\t\t\tcontrol={<Checkbox value=\"remember\" color=\"primary\" />}\n    \t\t\t\t\t\tlabel=\"パスワードを保存する\"\n    \t\t\t\t\t/>\n    \t\t\t\t\t<Button\n    \t\t\t\t\t\ttype=\"submit\"\n    \t\t\t\t\t\tfullWidth\n    \t\t\t\t\t\tvariant=\"contained\"\n    \t\t\t\t\t\tcolor=\"primary\"\n    \t\t\t\t\t\tclassName={classes.submit}\n    \t\t\t\t\t>ログイン\n    \t\t\t\t\t</Button>\n    \t\t\t\t\t{/* <Grid container>\n    \t\t\t\t\t\t<Grid item xs>\n    \t\t\t\t\t\t\t<Link href=\"/reset\" variant=\"body2\">\n    \t\t\t\t\t\t\t\tパスワードを忘れた場合\n    \t\t\t\t\t\t\t</Link>\n    \t\t\t\t\t\t</Grid>\n    \t\t\t\t\t\t<Grid item>\n    \t\t\t\t\t\t\t<Link href=\"/register\" variant=\"body2\">\n    \t\t\t\t\t\t\t\tアカウントを作成する\n    \t\t\t\t\t\t\t</Link>\n    \t\t\t\t\t\t</Grid>\n    \t\t\t\t\t</Grid> */}\n    \t\t\t\t</form>\n    \t\t\t</div>\n    \t\t\t<Box mt={8}>\n    \t\t\t\t<Copyright />\n    \t\t\t</Box>\n    \t\t</Container>\n        </div>\n\t);\n}",["173","174"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Register.js",["175","176","177","178"],"import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from 'react-router-dom';\nimport { serverUrl, copyright } from '../../common';\nimport Header from '../parts/header';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport User from './User';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                {copyright}\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    selected_platform: {\n        backgroundColor: 'black',\n        borderRadius: 0,\n    },\n}));\n\nexport default function Register() {\n\n    const history = useHistory();\n    const { register, handleSubmit, errors } = useForm();\n    const [selected_platform, set_selected_platform] = useState('all');\n    const [error, set_error] = useState('');\n    const classes = useStyles();\n\n    function sendRegister(argument){\n        var data = {\n            name: argument.email,\n            email: argument.email,\n            password: argument.password,\n        }\n        fetch(serverUrl + '/api/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        })\n        .then(response => {\n            if (!response.ok) {\n                set_error(response);\n            } else {                \n                return response.json().then(userInfo => {\n                    if('errors' in userInfo){\n                        set_error(userInfo.errors);\n                    } else {\n                        User.setArr('user', userInfo.user);\n                        User.login();\n                        history.push('/', {articles: userInfo.articles});\n                    }\n                });\n            }\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    return (\n        <div>\n            {/* <Header /> */}\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div className={classes.paper}>\n                    <Avatar className={classes.avatar}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">アカウント作成</Typography>\n                    {error !== '' && (\n                        <Typography color=\"error\">\n                            {Object.keys(error).map(key => (\n                                <li key={key}>{error[key]}</li>\n                            ))}\n                        </Typography>\n                    )}\n                    <form onSubmit={handleSubmit(sendRegister)} className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"メールアドレス\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    error={errors.email || error !== '' ? true : false}\n                                    inputRef={register({ required: true })}\n                                    helperText={\n                                        errors.email && <span>メールアドレスを入力してください。</span>\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"パスワード\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    error={errors.password || error !== '' ? true : false}\n                                    inputRef={register({ required: true })}\n                                    helperText={\n                                        errors.password && <span>メールアドレスを入力してください。</span>\n                                    }\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            アカウントを作成\n                        </Button>\n                        <Grid container justify=\"flex-end\">\n                            <Grid item>\n                                <Link href=\"/login\" variant=\"body2\">\n                                    アカウントをお持ちの場合\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n                <Box mt={5}>\n                    <Copyright />\n                </Box>\n            </Container>\n        </div>\n    );\n}",["179","180"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Auth.js",[],["181","182"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/header.js",["183","184","185","186","187","188","189","190","191","192","193"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/SideList.js",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/top.js",["194","195","196","197"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { diffDate, serverUrl } from '../../common';\nimport RigthSideList from '../parts/rightSideList';\nimport Sns from '../parts/sns';\nimport Breadcrumb from '../parts/breadcrumb';\nimport Header from '../parts/header';\nimport User from '../auth/User';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    grid: {\n        padding: '5px !important',\n        display: 'grid !important',\n    },\n}));\n\nexport default function Top(props){\n\n    const classes = useStyles();\n\n    function componentDidMount() {\n        document.title = '駆け出しエンジニアの開発ブログ';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n    });\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    {User.get('device') === 'pc' &&\n                        <Grid item xs={1} sm={1}>\n                            <Sns />\n                        </Grid>\n                    }\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 8 : 12}>\n                        <Paper>\n                            <div className=\"page_title\">\n                                <h1>お知らせ・更新</h1>\n                                <div className=\"update_date\">\n                                    <p>最終更新日: 2021年1月8日</p>\n                                </div>\n                                <div className=\"articles\">\n                                    {Object.keys(JSON.parse(User.getLocalStorage('qiitaData'))).map(key => {\n                                        return(                                        \n                                            <div className=\"article\" key={key}>\n                                                <span className=\"create_date\">{JSON.parse(User.getLocalStorage('qiitaData'))[key].date+': '}</span>\n                                                <a className=\"article_url\" href={JSON.parse(User.getLocalStorage('qiitaData'))[key].url}>\n                                                    {'【Qiita】' + JSON.parse(User.getLocalStorage('qiitaData'))[key].notice_content}\n                                                </a>\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        </Paper>\n                    </Grid>\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 3 : 12}>\n                        <Paper>\n                            <RigthSideList twitterData={props.twitterData} />\n                        </Paper>\n                    </Grid>\n              </Grid>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/Main.js",["198","199"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/User.js",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/TabPanel.js",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/auth/Reset.js",["200","201","202","203","204"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useForm } from \"react-hook-form\";\nimport User from './User';\nimport { serverUrl, copyright } from '../../common';\nimport Header from '../parts/header';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Alert from '@material-ui/lab/Alert';\n\nfunction Copyright() {\n\treturn (\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t{'Copyright © '}\n\t\t\t<Link color=\"inherit\" href=\"https://material-ui.com/\">\n                {copyright}\n            </Link>{' '}\n\t\t\t{new Date().getFullYear()}\n\t\t\t{'.'}\n\t\t</Typography>\n\t);\n}\n\nconst useStyles = makeStyles((theme) => ({\n    aleart: {\n        width: '100%',\n    },\n\tpaper: {\n\t\tmarginTop: theme.spacing(8),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center',\n\t},\n\tavatar: {\n\t\tmargin: theme.spacing(1),\n\t\tbackgroundColor: theme.palette.secondary.main,\n\t},\n\tform: {\n\t\twidth: '100%', // Fix IE 11 issue.\n\t\tmarginTop: theme.spacing(1),\n\t},\n\tsubmit: {\n\t\tmargin: theme.spacing(3, 0, 2),\n\t},\n}));\n\nexport default function Reset() {\n\n    const history = useHistory();\n\tconst classes = useStyles();\n    const { register, handleSubmit, errors } = useForm();\n    const [error, set_error] = useState('');\n    const [success_aleart, set_success_aleart] = useState('');\n    const [error_aleart, set_error_aleart] = useState('');\n\n    function passwordReset(argument) {\n        var data = {\n            email: argument.email,\n        }\n        fetch(serverUrl + '/api/password/reset', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        })\n        .then(response => {\n            if (!response.ok) {\n                set_error_aleart(response);\n            } else {\n                return response.json().then(userInfo => {\n                    console.log(userInfo);\n                    if('errors' in userInfo){\n                        set_success_aleart('');\n                        set_error_aleart(userInfo.errors);\n                    } else {\n                        set_error_aleart('');\n                        set_success_aleart('リセットメールを送信しました。');\n                        User.set('api_token', userInfo.token);\n                        User.setArr('user', userInfo.user);\n                    }\n                });\n            }\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n\treturn (\n        <div>\n            {/* <Header /> */}\n    \t\t<Container component=\"main\" maxWidth=\"xs\">\n    \t\t\t<CssBaseline />\n    \t\t\t<div className={classes.paper}>\n    \t\t\t\t<Avatar className={classes.avatar}>\n    \t\t\t\t\t<LockOutlinedIcon />\n    \t\t\t\t</Avatar>\n\n    \t\t\t\t<Typography component=\"h1\" variant=\"h5\">パスワードリセット</Typography>\n\n                    {success_aleart !== '' && (\n        \t\t\t\t<Typography component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                            <Alert severity=\"success\">{success_aleart}</Alert>\n                        </Typography>\n                    )}\n\n                    {error_aleart !== '' && (\n                    <Typography component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                        {Object.keys(error_aleart).map(key => (\n                            <Alert key={key} severity=\"error\">{error_aleart[key]}</Alert>\n                        ))}\n                    </Typography>\n                    )}\n\n    \t\t\t\t<form onSubmit={handleSubmit(passwordReset)} className=\"player_name_form\">\n    \t\t\t\t\t<TextField\n    \t\t\t\t\t\tvariant=\"outlined\"\n    \t\t\t\t\t\tmargin=\"normal\"\n    \t\t\t\t\t\trequired\n    \t\t\t\t\t\tfullWidth\n    \t\t\t\t\t\tid=\"email\"\n    \t\t\t\t\t\tlabel=\"メールアドレス\"\n    \t\t\t\t\t\tname=\"email\"\n    \t\t\t\t\t\tautoComplete=\"email\"\n    \t\t\t\t\t\tautoFocus\n    \t\t\t\t\t\terror={errors.email || error !== '' ? true : false}\n    \t\t\t\t\t\tinputRef={register({ required: true })}\n    \t\t\t\t\t\thelperText={\n    \t\t\t\t\t\t\terrors.email && <span>メールアドレスを入力してください。</span>\n    \t\t\t\t\t\t}\n    \t\t\t\t\t/>\n    \t\t\t\t\t<Button\n    \t\t\t\t\t\ttype=\"submit\"\n    \t\t\t\t\t\tfullWidth\n    \t\t\t\t\t\tvariant=\"contained\"\n    \t\t\t\t\t\tcolor=\"primary\"\n    \t\t\t\t\t\tclassName={classes.submit}\n    \t\t\t\t\t>リセットメールを送信\n    \t\t\t\t\t</Button>\n    \t\t\t\t\t<Grid container>\n    \t\t\t\t\t\t<Grid item>\n    \t\t\t\t\t\t\t<Link href=\"/register\" variant=\"body2\">\n    \t\t\t\t\t\t\t\tアカウントを作成する\n    \t\t\t\t\t\t\t</Link>\n    \t\t\t\t\t\t</Grid>\n    \t\t\t\t\t</Grid>\n    \t\t\t\t</form>\n    \t\t\t</div>\n    \t\t\t<Box mt={8}>\n    \t\t\t\t<Copyright />\n    \t\t\t</Box>\n    \t\t</Container>\n        </div>\n\t);\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/contact.js",["205","206"],"import React, { useState, useMemo, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport Header from '../parts/header';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { serverUrl } from '../../common';\nimport Breadcrumb from '../parts/breadcrumb';\n\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    aleart: {\n        marginTop: '20px',\n    },\n    form: {\n        width: '80%',\n        margin: '0 auto',\n    },\n    form_input: {\n        width: '100%',\n        margin: '20px 0 0 0',\n    },\n    post_button: {\n        width: '100%',\n        margin: '20px 0 0 0',\n    },\n    error_message: {\n        fontSize: 17,\n        listStyle: 'none',\n        marginLeft: 30,\n        marginBottom: 15,\n        width: '100% !important',\n    },\n}));\n\nexport default function Contact(props){\n\n    const { register, handleSubmit, errors, reset } = useForm();\n    const classes = useStyles();\n    const [error, set_error] = useState('');\n    const [success_aleart, set_success_aleart] = useState('');\n\n    function componentDidMount() {\n        document.title = 'お問い合わせ';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n    });\n\n    function post(data){\n        if(window.confirm(\"送信しますか?\")){\n            fetch(serverUrl + '/api/contact', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json',},\n                body: JSON.stringify(data),\n            })\n            .then(response => {\n                if (!response.ok) {\n                    set_error(response);\n                } else {\n                    return response.json().then(data => {\n                        console.log(data);\n                        if('errors' in data){\n                            set_error(data.errors);\n                            set_success_aleart('');\n                        } else {\n                            set_error('');\n                            set_success_aleart(data.message);\n                        }\n                    });\n                }\n            }).catch(error => {\n                set_error(error);\n            })\n        }\n    }\n\n    return(\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <form onSubmit={handleSubmit(post)} className={classes.form}>\n\n                    {success_aleart !== '' && (\n        \t\t\t\t<Typography component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                            <Alert severity=\"success\">{success_aleart}</Alert>\n                        </Typography>\n                    )}\n                    {error !== '' && (\n                        <Typography color=\"error\" component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                            {Object.keys(error).map(key => (\n                                <Alert key={key} severity=\"error\">{error[key]}</Alert>\n                            ))}\n                        </Typography>\n                    )}\n\n                    <TextField variant=\"outlined\" name=\"email\" size=\"small\" className={classes.form_input}\n                        error={errors.email ? true : false}\n                        inputRef={register({ pattern: /^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}/ })}\n                        helperText={\n                            errors.email && <span className=\"error_message\">メールアドレスの形式が正しくありません。</span>\n                        }\n                        label={'メールアドレス(任意)'}\n                    />\n                    <TextField variant=\"outlined\" name=\"contents\" multiline rows={7} className={classes.form_input}\n                        error={errors.contents ? true : false}\n                        inputRef={register({ required: true })}\n                        helperText={\n                            errors.contents && <span className=\"error_message\">お問い合わせ内容を入力してください。</span>\n                        }\n                        label={'お問い合わせ内容'}\n                    />\n\n                    <Button onClick={handleSubmit(post)} className={classes.post_button} variant=\"contained\" color=\"primary\">\n                        送信する\n                    </Button>\n                </form>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/common.js",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/regularExpression.tsx",["207","208","209","210"],"import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport '../../css/tools/regularExpression.css';\nimport '../../css/tools/tools.css';\nimport Header from '../parts/header';\nimport Breadcrumb from '../parts/breadcrumb';\n\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\nimport BackspaceOutlinedIcon from '@material-ui/icons/BackspaceOutlined';\nimport Grid from '@material-ui/core/Grid';\n\nexport const RegularExpression: React.FC = (props) => {\n\n    function componentDidMount() {\n        document.title = '正規表現ツール';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n    });\n\n    var customRegularEexpression: string = ''; //正規表現パターン\n    var optionFlag: string = ''; //正規表現パターン\n\n    const [input_str, setInputStr] = useState('');\n    const [result, setResult] = useState('');\n    const [custom_regular_expression, setCustomRegularRxpression] = useState('');\n\n    const [example_regularExpression_postalCode, setExample_regularExpression_postalCode] = useState(false);\n    const [example_regularExpression_emailAddress, setExample_regularExpression_emailAddress] = useState(false);\n    const [example_regularExpression_phoneNumber, setExample_regularExpression_phoneNumber] = useState(false);\n    const [example_regularExpression_day, setExample_regularExpression_day] = useState(false);\n\n    //オプションフラグ\n    const [option_flag, set_option_flag] = useState('');\n    const [option_flag_g, set_option_flag_g] = useState(false);\n    const [option_flag_i, set_option_flag_i] = useState(false);\n    const [option_flag_m, set_option_flag_m] = useState(false);\n    const [option_flag_dot, set_option_flag_dot] = useState(false);\n\n    //正規表現実行\n    function run_regular_expression(customRegularEexpression: string, str: string = ''): void {\n        const regexp = new RegExp(customRegularEexpression, optionFlag);\n        const matchStr = str === '' ? input_str.match(regexp) : str.match(regexp);\n        if(matchStr !== null){\n            matchStr.forEach(value =>\n                setResult(value)\n            )\n        } else {\n            setResult('');\n        }\n    }\n\n    function set_regular_expression(e: any): void{\n\n        var value: string = e.target.value;\n        var name: string = e.target.name;\n        var checked: boolean = e.target.checked;\n\n        customRegularEexpression = custom_regular_expression;\n        optionFlag = option_flag;\n\n        if(name === 'input_str'){\n            setInputStr(value);\n            run_regular_expression(customRegularEexpression, value);\n            return;\n        } else if(name === 'custom_regular_expression'){\n            customRegularEexpression = value;\n            setCustomRegularRxpression(value);\n        } else if(name === 'example_regularExpression_postalCode'){\n            customRegularEexpression = checked === true ? custom_regular_expression + '[0-9]{3}-[0-9]{4}' : custom_regular_expression.replace('[0-9]{3}-[0-9]{4}', '');\n            setCustomRegularRxpression(customRegularEexpression);\n            setExample_regularExpression_postalCode(checked);\n        } else if(name === 'example_regularExpression_emailAddress'){\n            customRegularEexpression = checked === true ? custom_regular_expression + '^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\\\.[A-Za-z0-9]{1,}' : custom_regular_expression.replace('^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\\\.[A-Za-z0-9]{1,}', '');\n            setCustomRegularRxpression(customRegularEexpression);\n            setExample_regularExpression_emailAddress(checked);\n        } else if(name === 'example_regularExpression_phoneNumber'){\n            customRegularEexpression = checked === true ? custom_regular_expression + '^\\\\d{1,4}-\\\\d{1,4}-\\\\d{3,4}$' : custom_regular_expression.replace('^\\\\d{1,4}-\\\\d{1,4}-\\\\d{3,4}$', '');\n            setCustomRegularRxpression(customRegularEexpression);\n            setExample_regularExpression_phoneNumber(checked);\n        } else if(name === 'example_regularExpression_day'){\n            customRegularEexpression = checked === true ? custom_regular_expression + '\\\\d{4}/\\\\d{1,2}/\\\\d{1,2}' : custom_regular_expression.replace('\\\\d{4}/\\\\d{1,2}/\\\\d{1,2}', '');\n            setCustomRegularRxpression(customRegularEexpression);\n            setExample_regularExpression_day(checked);\n        }\n\n        //オプションフラグ\n        else if(name === 'option_flag_g'){\n            optionFlag = checked === true ? option_flag + 'g' : option_flag.replace('g', '');\n            set_option_flag(optionFlag);\n            set_option_flag_g(checked);\n        } else if(name === 'option_flag_i'){\n            optionFlag = checked === true ? option_flag + 'i' : option_flag.replace('i', '');\n            set_option_flag(optionFlag);\n            set_option_flag_i(checked);\n        } else if(name === 'option_flag_m'){\n            optionFlag = checked === true ? option_flag + 'm' : option_flag.replace('m', '');\n            set_option_flag(optionFlag);\n            set_option_flag_m(checked);\n        } else if(name === 'option_flag_dot'){\n            optionFlag = checked === true ? option_flag + '.' : option_flag.replace('.', '');\n            set_option_flag(optionFlag);\n            set_option_flag_dot(checked);\n        }\n        run_regular_expression(customRegularEexpression, optionFlag);\n    }\n\n    function set_regular_expression_button(target_name: string): void{\n        customRegularEexpression = custom_regular_expression + target_name;\n        setCustomRegularRxpression(custom_regular_expression + target_name);\n        run_regular_expression(customRegularEexpression);\n    }\n\n    function input_delete(inputName: string){\n        if(inputName === 'input_str'){\n            setInputStr('');\n        } else if(inputName === 'custom_regular_expression'){\n            setCustomRegularRxpression('');\n        } else if(inputName === 'result'){\n            setResult('');\n        }\n    }\n\n    const styles = {\n        resize:{'fontSize': '16px'},\n    }\n\n    return(\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className=\"root\">\n                <TextField className=\"input_str\" label=\"検証対象文字列\" variant=\"outlined\" size=\"small\" name=\"input_str\"\n                    InputProps={{endAdornment:\n                        <div className=\"input_icon\">\n                            <IconButton className=\"\" data-clipboard-text={input_str}>\n                                <FileCopyOutlinedIcon fontSize=\"small\" className=\"copy_icon\" />\n                            </IconButton>\n                            <IconButton onClick={() => input_delete('input_str')}>\n                                <BackspaceOutlinedIcon fontSize=\"small\" className=\"copy_icon\" />\n                            </IconButton>\n                        </div>\n                    }}\n                    InputLabelProps={{style: {fontSize: 17, paddingTop: 2}}}\n                    onChange={(e) => set_regular_expression(e)}\n                    value={input_str}\n                />\n                <TextField className=\"input_str\" label=\"正規表現\" variant=\"outlined\" size=\"small\" name=\"custom_regular_expression\"\n                    InputProps={{endAdornment:\n                        <div className=\"input_icon\">\n                            <IconButton className=\"\" data-clipboard-text={custom_regular_expression}>\n                                <FileCopyOutlinedIcon fontSize=\"small\" className=\"copy_icon\" />\n                            </IconButton>\n                            <IconButton onClick={() => input_delete('custom_regular_expression')}>\n                                <BackspaceOutlinedIcon fontSize=\"small\" className=\"copy_icon\" />\n                            </IconButton>\n                        </div>\n                    }}\n                    InputLabelProps={{style: {fontSize: 17, paddingTop: 2}}}\n                    onChange={(e) => set_regular_expression(e)}\n                    value={custom_regular_expression}\n                />\n                    <Grid container spacing={3} className=\"input_regular_expression\">\n                        <Grid item xs={6} sm={6}>\n                        <p className=\"input_regular_expression_title\">【 正規表現パターン 】</p>\n                                <div className=\"regular_expression_pattren_button_form readmore\">\n                                    <input id=\"check1\" className=\"readmore-check\" type=\"checkbox\" />\n                                    <div className=\"readmore-content\">\n                                        <div className=\"regular_expression_pattren_button_group\">\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('/')}>\\: 次の文字をエスケープ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^')}>^: 行の先頭にマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('$')}>$: 行の末尾にマッチ</Button>\n                                        </div>\n                                        <div className=\"regular_expression_pattren_button_group\">\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('*')}>*: 直前の文字の0回以上の繰り返しにマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('+')}>+: 直前の文字の1回以上の繰り返しにマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('?')}>?: 直前の文字の0回か1回の出現にマッチ</Button>\n                                        </div>\n                                        <div className=\"regular_expression_pattren_button_group\">\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('x|y')}>x|y: 'x',または'y'にマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('{n}')}>{'{n}: '}直前の文字がちょうどn回出現するものにマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('{n,}')}>{'{n,}: '}'直前の式の少なくともn回の出現にマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('{n,m}')}>{'{n,m}: '}直前の文字が少なくともn回、多くてもm回出現するものにマッチ</Button>\n                                        </div>\n                                        <div className=\"regular_expression_pattren_button_group\">\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('ABC')}>ABC: 「ABC」という文字列にマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('[ABC]')}>[ABC]: A,B,Cのいずれか１文字にマッチ</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('[^ABC]')}>[^ABC]: A,B,C以外のいずれか１文字にマッチ</Button>\n                                        </div>\n                                        <div className=\"regular_expression_pattren_button_group\">\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('\\\\d')}>&#092;d: 数字にマッチ。[0-9]に相当</Button>\n                                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('\\\\D')}>&#092;D: 数字以外の文字にマッチ。[^0-9]に相当</Button>\n                                        </div>\n                                    </div>\n                                    <label className=\"readmore-label\" htmlFor=\"check1\"></label>\n                                </div>\n\n                                <div className=\"option_flag_input_form\">\n                                    <p className=\"input_regular_expression_title\">【 オプションフラグ 】</p>\n                                    <label>\n                                        <Checkbox name=\"option_flag_g\" checked={option_flag_g} color=\"default\" onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                        <span>グローバルサーチ</span>\n                                    </label>\n                                    <label>\n                                        <Checkbox name=\"option_flag_i\" checked={option_flag_i} color=\"default\" onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                        <span>大文字・小文字を区別しない検索</span>\n                                    </label>\n                                    <label>\n                                        <Checkbox name=\"option_flag_m\" checked={option_flag_m} color=\"default\" onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                        <span>複数行検索</span>\n                                    </label>\n                                    <label>\n                                        <Checkbox name=\"option_flag_dot\" checked={option_flag_dot} color=\"default\" onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                        <span>.を改行文字と一致させる</span>\n                                    </label>\n                                </div>\n                        </Grid>\n\n                        <Grid className=\"exmple_form\" item xs={6} sm={6}>\n                            <div>\n                                <p className=\"input_regular_expression_title\">【 パターン例 】</p>\n                                <div className=\"regular_expression_pattren_button_form\">\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('[A-Za-z]')}>[A-Za-z]: アルファベット</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('[ぁ-ん]')}>[ぁ-ん]: 全角ひらがな</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('[ァ-ヴ]')}>[ァ-ンヴー]: 全角カタカナ</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^[0-9]*$')}>^[0-9]*$: 半角数値のみ</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^[a-zA-Z]*$')}>^[a-zA-Z]*$: 半角英字のみ</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^[0-9a-zA-Z]*$')}>^[0-9a-zA-Z]*$: 半角英数字のみ</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^([0-9]{5,})$')}>{'^([0-9]{5,})$'}: 5文字以上の半角英数字</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^([0-9]{0,5})$')}>{'^([0-9]{0,5})$'}: 5文字以内の半角英数字</Button>\n                                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => set_regular_expression_button('^([a-zA-Z0-9]{5,10})$')}>{'^([a-zA-Z0-9]{5,10})$'}: 5文字以上10文字以内の半角英数字</Button>\n                                </div>\n                            </div>\n                            <div>\n                                <p className=\"input_regular_expression_title\">【 代表的な正規表現例 】</p>\n                                <details>\n                                    <summary>\n                                        <label className=\"regularExpression_detail\">\n                                            <div className=\"regularExpression_detail_title\">\n                                                <Checkbox name=\"example_regularExpression_postalCode\" color=\"default\" checked={example_regularExpression_postalCode} onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                                <p>郵便番号</p>\n                                            </div>\n                                            <div className=\"regularExpression_detail_display\">\n                                                <p>{'[0-9]{3}-[0-9]{4}'}</p>\n                                            </div>\n                                        </label>\n                                    </summary>\n                                    <div className=\"example_regularExpression_explanation\">\n                                        <ul>\n                                            <li>{'[0-9]は0から9の半角数字が一つあることを意味しています。'}</li>\n                                            <li>{'{3}は直前の[0-9]のパターンが３回繰り返されることを意味しています。'}</li>\n                                            <li>{'-はハイフンがあることを意味しています。'}</li>\n                                        </ul>\n                                    </div>\n                                </details>\n                                <details>\n                                    <summary>\n                                        <label className=\"regularExpression_detail\">\n                                            <div className=\"regularExpression_detail_title\">\n                                                <Checkbox name=\"example_regularExpression_phoneNumber\" color=\"default\" checked={example_regularExpression_phoneNumber} onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                                <p>電話番号</p>\n                                            </div>\n                                            <div className=\"regularExpression_detail_display\">\n                                                <p>{'^\\\\d{1,4}-\\\\d{1,4}-\\\\d{3,4}$'}</p>\n                                            </div>\n                                        </label>\n                                    </summary>\n                                    <div className=\"example_regularExpression_explanation\">\n                                        <ul>\n                                            <li>{'半角ハイフンを含んだ1〜4桁・1〜4桁・3〜4桁の半角数字を意味しています。'}</li>\n                                        </ul>\n                                    </div>\n                                </details>\n                                <details>\n                                    <summary>\n                                        <label className=\"regularExpression_detail\">\n                                            <div className=\"regularExpression_detail_title\">\n                                                <Checkbox name=\"example_regularExpression_day\" color=\"default\" checked={example_regularExpression_day} onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                                <p>日付</p>\n                                            </div>\n                                            <div className=\"regularExpression_detail_display\">\n                                                <p>{'\\\\d{4}/\\\\d{1,2}/\\\\d{1,2}'}</p>\n                                            </div>\n                                        </label>\n                                    </summary>\n                                    <div className=\"example_regularExpression_explanation\">\n                                        <ul>\n                                            <li>{'\\\\d{4}は、数字４桁であることを意味しています。'}。</li>\n                                            <li>{'\\\\d{1,2}は、数字1桁~2桁であること。'}。</li>\n                                            <li>※フォーマットは\"yyyy/m/d\"のみとします。</li>\n                                        </ul>\n                                    </div>\n                                </details>\n                                <details>\n                                    <summary>           \n                                        <label className=\"regularExpression_detail\">\n                                            <div className=\"regularExpression_detail_title\">\n                                                <Checkbox name=\"example_regularExpression_emailAddress\" color=\"default\" checked={example_regularExpression_emailAddress} onClick={(e) => set_regular_expression(e)} size=\"small\" />\n                                                <p>Emailアドレス</p>\n                                            </div>\n                                            <div className=\"regularExpression_detail_display\">\n                                                <p>{'^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\\\.[A-Za-z0-9]{1,}'}</p>\n                                            </div>\n                                        </label>\n                                    </summary>\n                                    <div className=\"example_regularExpression_explanation\">\n                                        <ul>\n                                            <li>{'^[A-Za-z0-9]{1}は、アルファベット小文字/大文字/数字を意味しています。'}</li>\n                                            <li>{'[A-Za-z0-9_.-]*は、アルファベット小文字/大文字/数字/アンダースコア/ピリオド/ハイフンを意味しています。(0文字以上)'}</li>\n                                            <li>{'@{1}は、連続してはいけないことを意味しています。'}</li>\n                                            <li>{'[A-Za-z0-9_.-]{1,}は、アルファベット小文字/大文字/数字/アンダースコア/ピリオド/ハイフンを意味しています。(1文字以上)'}</li>\n                                            <li>{'\\\\.[A-Za-z0-9]{1,}$は、アルファベット小文字/大文字/数字を意味しています。(1文字以上)'}</li>\n                                        </ul>\n                                    </div>\n                                </details>\n                            </div>\n                        </Grid>\n                    </Grid>\n\n                <TextField className=\"result_form\" label=\"結果\" rows={5} variant=\"outlined\" multiline value={result}\n                    InputProps={{endAdornment:\n                        <div className=\"input_icon\">\n                            <IconButton data-clipboard-text={result}>\n                                <FileCopyOutlinedIcon className=\"copy_icon\" />\n                            </IconButton>\n                            <IconButton onClick={() => input_delete('result')}>\n                                <BackspaceOutlinedIcon className=\"copy_icon\" />\n                            </IconButton>\n                        </div>\n                    }}\n                />\n\n                <div className=\"box_form\">\n                    <span className=\"box-title\">ツール説明</span>\n                    <p className=\"p1\">\n                        JavaScriptで動作する正規表現の生成/テストツールです。<br/>\n                        ※JavaScript以外の言語では正常に動作しない可能性があります。<br/>\n                        入力されている正規表現をmatchメソッドを実行し、マッチングした文字列を表示しています。\n                    </p>\n                    <p className=\"p2\">\n                        入力したデータはSPA処理をしているため、ページの読み込みが必要なく入力されたデータは常に正規表現チェックしております。<br/>\n                        また外部との通信をしていないためデータの漏洩リスクはございません。\n                    </p>\n                    <blockquote>\n                        <p>■参考リンク</p>\n                        <cite>引用：<a target=\"_blank\" href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">正規表現 - JavaScript | MDN</a></cite>\n                        <cite>引用：<a target=\"_blank\" href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp - JavaScript | MDN</a></cite>\n                        <cite>引用：<a target=\"_blank\" href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match\">String.prototype.match() - MDN</a></cite>\n                    </blockquote>\n                </div>\n\n                <div className=\"box_form\">\n                    <span className=\"box-title\">ツール使用方法</span>\n                    <ul>\n                        <li>1番上の入力フォームに確認したい文字列を入力。</li>\n                        <li>2番目の入力フォームに正規表現を入力、もしくは「正規表現パターン」「代表的な正規表現例」から選択。</li>\n                        <li>高度な検索が必要な場合はオプションフラグを選択。</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n",["211","212"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/rightSideList.js",["213"],"import { TwitterTimelineEmbed } from 'react-twitter-embed'\n\nexport default function RigthSideList(props){\n\n    var twitterData = props.twitterData;\n\n    return(\n        <div className=\"latest_info\">\n            <TwitterTimelineEmbed\n                sourceType=\"profile\"\n                screenName=\"metalic_kudo_h\"\n                options={{height: 400}}\n            />\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/sns.js",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/radioComponent.tsx",["214"],"import * as React from 'react';\nimport { useState } from 'react';\n\ntype Props = {\n    className?: string;\n    name: string;\n    value: string;\n    onClick: any;\n    option: string;\n    state?: any;\n}\n\nexport var Radio: React.FC<Props> = ({className = '', name, value, onClick, option, state = null}) => {\n    var checked_state = state === value ? true: false;\n    //onChangeはエラー回避のためのダミー\n    const [checked, setChecked] = useState(checked_state);\n    function checkedManagement(){\n        if(checked_state){\n            setChecked(true);\n        } else {\n            setChecked(false);\n        }\n    }\n    return(\n        <label className={className}>\n            <input type=\"radio\" name={name} value={value} onClick={onClick} onChange={() => checkedManagement()} checked={checked_state}/>\n            <span>{option}</span>\n        </label>\n    )\n}",["215","216"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/programGenerate.tsx",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239"],"\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport '../../css/tools/programGenerate.css';\nimport '../../css/tools/tools.css';\n\nimport * as source_code from './source_code';\nimport {Radio} from './components/radioComponent';\nimport {CheckBox} from './components/checkboxComponent';\nimport {Tooltip} from './components/tooltipComponent';\nimport {Code} from './components/codeComponent';\nimport {Result} from './components/resultComponent';\nimport {Details} from './components/detailsComponent';\nimport Header from '../parts/header';\nimport Breadcrumb from '../parts/breadcrumb';\n\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\n\nexport const ProgramGenerate: React.FC = (props) => {\n\n    const [code, setCode] = useState(''); //基本ソースコード\n    const [language, setLanguage] = useState('JavaScript');\n    const [method, setMethod] = useState('Ajax');\n\n    //Ajaxオプション\n    //共通\n    const [option_method, setOptionMethod] = useState('GET');\n    const [options, setOptions] = useState('*result_space*');\n    const [header_count, setHeaderCount] = useState(0);  //ヘッダー数\n    const [property_count, setPropertyCount] = useState(2);  //プロパティ数\n    const [method_count, setMethodCount] = useState(2);  //メソッド数\n    const [option_ajax_url, setOptionApiUrl] = useState('https://kudohayatoblog.com/api/exmple');\n    const [option_header_content_type_flag, setOptionContentTypeFlag] = useState(0);\n    const [option_header_content_type, setOptionContentType] = useState('Content-Type\", \"application/json;charset=UTF-8');\n    //js\n    const [option_property_onreadystatechange, setOptionOnreadystatechangeFlag] = useState(1);\n    const [option_property_readyState, setOptionReadyState] = useState(0);\n    const [option_property_response, setOptionResponse] = useState(1);\n    const [option_property_responseText, setOptionResponseText] = useState(0);\n    const [option_property_status, setOptionStatus] = useState(0);\n    const [option_property_statusText, setOptionStatusText] = useState(0);\n    const [option_property_onerror, setOptionOnerror] = useState(0);\n    const [option_property_onloadend, setOptionOnloadend] = useState(0);\n    const [option_method_abort, setOptionAbort] = useState(0);\n    const [option_method_open, setOptionOpen] = useState(1);\n    const [option_method_send, setOptionSend] = useState(1);\n    const [option_method_getAllResponseHeaders, setOptionGetAllResponseHeaders] = useState(0);\n    \n    //php\n    const [option_curl_setopt, setOption_curl_setopt] = useState(1);\n    const [CURLOPT_BINARYTRANSFER, setCURLOPT_BINARYTRANSFER] = useState(0);    \n    const [option_curl_error, setOption_curl_error] = useState(0);\n    const [option_curl_errno, setOption_curl_errno] = useState(0);\n\n    //文字列操作オプション\n    const [option_str_text, setOptionStrText] = useState('javascript文字列');\n    const [option_str, setOptionStr] = useState('');\n\n    //非同期処理で使うstateで管理できない者たち\n    var CodeName = 'JavaScript_Ajax_Default'; //呼び出すモジュール名\n    var defaultCode = '';\n\n    function componentDidMount() {\n        document.title = 'プログラム生成ツール';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n        getDefaultCode('JavaScript', 'Ajax', 'option_property_onreadystatechange');\n    });\n\n    //基本コード\n    function getDefaultCode(language_arg: string, method_arg: string = '', option_arg: string = 'Default'){\n        setLanguage(language_arg);\n        setMethod(method_arg);\n        CodeName = language_arg + '_' + method_arg + '_' + option_arg;\n        defaultCode = language_arg + '_' + method_arg + '_' + 'Default';\n\n        if(method_arg == 'Ajax'){\n            if(option_arg === 'reset'){\n                setOptionMethod('GET');\n                setOptionApiUrl('https://kudohayatoblog.com/api/exmple');\n                setOptionContentType('Content-Type\", \"application/json;charset=UTF-8');\n                if(language_arg === 'JavaScript'){\n                    setOptions('*result_space*');\n                    setOptionContentTypeFlag(0);\n                    setOptionOnreadystatechangeFlag(1);\n                    setOptionReadyState(0);\n                    setOptionResponse(1);\n                    setOptionResponseText(0);\n                    setOptionStatus(0);\n                    setOptionStatusText(0);\n                    setOptionOnerror(0);\n                    setOptionOnloadend(0);\n                    setOptionAbort(0);\n                    setOptionOpen(1);\n                    setOptionSend(1);\n                    setOptionGetAllResponseHeaders(0);\n                    setHeaderCount(0);\n                    setPropertyCount(2);\n                    setMethodCount(2);\n                    setCode(source_code[defaultCode].replace(option_method, 'GET') + source_code['JavaScript_Ajax_option_property_onreadystatechange']);\n                } else if(language_arg === 'PHP'){\n                    setOption_curl_setopt(0);\n                    setCURLOPT_BINARYTRANSFER(0);\n                    setOption_curl_error(0);\n                    setOption_curl_errno(0);\n                    setPropertyCount(0);\n                    setMethodCount(0);\n                    setCode(source_code[defaultCode]);\n                }\n            } else if(option_arg === 'option_property_onreadystatechange'){\n                setCode(source_code[defaultCode].replace('GET', option_method) + source_code[CodeName]);\n            } else {\n                setCode(source_code[CodeName].replace('GET', option_method));\n            }\n        } else {\n            setCode(source_code[CodeName]);\n        }\n    }\n\n    //オプション付き\n    function getOptionCode(option: any){\n        option.persist(); //非同期\n        var option_name: string = option.target.name;\n        var option_val: any = option.target.value;\n        var CodeName = language + '_' + method + '_' + option_name;\n        var content_type_code =\n`xhr.setRequestHeader(\"${option_header_content_type}\");\nxhr.send();`;\n\n        function operation(type: string){\n            if(type === 'property'){\n                if(option_val == 0){\n                    setOptions(options + source_code[CodeName]);\n                    setCode(code.replace(options, options + source_code[CodeName]));\n                    setPropertyCount(property_count+1);\n                } else {\n                    setOptions(options.replace(source_code[CodeName], ''));\n                    setCode(code.replace(source_code[CodeName], ''));\n                    setPropertyCount(property_count-1);\n                }\n            } else if(type === 'method'){\n                if(option_val == 0){\n                    setMethodCount(method_count+1);\n                } else {\n                    setMethodCount(method_count-1);\n                }\n            }\n        }\n\n        /*Ajaxオプション*/\n        if(method === 'Ajax'){\n            //get・post設定\n            if(option_name ==='option_method'){\n                setOptionMethod(option_val);\n                if(language === 'JavaScript'){\n                    setCode(code.replace(option_method, option_val));\n                } else if(language === 'PHP'){\n                    if(option_val === 'POST'){\n                        setCode(code.replace('*method*', source_code[CodeName]));\n                    } else {\n                        setCode(code.replace(source_code[CodeName], '*method*'));\n                    }                    \n                }                \n            //URL設定\n            } else if(option_name === 'option_ajax_url'){\n                if ( option_ajax_url.length == 0 ) {\n                    setCode(code.replace('url = \"', 'url = \"' + option_val));\n                    setOptionApiUrl(option_val);\n                } else {\n                    setCode(code.replace('url = \"' + option_ajax_url, 'url = \"' + option_val));\n                    setOptionApiUrl(option_val);\n                }\n            //Content-Type表示設定\n            } else if(option_name === 'option_header_content_type_flag'){\n                if(option_val == 0){\n                    setCode(code.replace('xhr.send();', content_type_code));\n                    setOptionContentTypeFlag(1);\n                    setHeaderCount(header_count+1);\n                } else {\n                    setCode(code.replace(content_type_code, 'xhr.send();'));\n                    setOptionContentTypeFlag(0);\n                    setHeaderCount(header_count-1);\n                }\n            //Content-Type設定\n            } else if(option_name === 'option_header_content_type'){\n                setCode(code.replace('xhr.setRequestHeader(\"' + option_header_content_type + '\");', 'xhr.setRequestHeader(\"' + option_val + '\");'));\n                setOptionContentType(option_val);\n            } else if(option_name === 'option_ajax_reset'){\n                getDefaultCode(language, 'Ajax', 'reset');\n            }\n\n            if(language === 'JavaScript'){\n                //onreadystatechange\n                if(option_name === 'option_property_onreadystatechange') {\n                    if(option_val == 0){\n                        setCode(code + source_code[CodeName]);\n                        setOptionOnreadystatechangeFlag(1);\n                        setPropertyCount(property_count+1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], ''));\n                        setOptionOnreadystatechangeFlag(0);\n                        setPropertyCount(property_count-1);\n                    }\n                //readyState\n                } else if(option_name === 'option_property_readyState') {\n                    operation('property');\n                    option_val == 0 ? setOptionReadyState(1) : setOptionReadyState(0);\n                //response\n                } else if(option_name === 'option_property_response'){\n                    operation('property');\n                    option_val == 0 ? setOptionResponse(1) : setOptionResponse(0);\n                //responseText\n                } else if(option_name === 'option_property_responseText'){\n                    operation('property');\n                    option_val == 0 ? setOptionResponseText(1) : setOptionResponseText(0);\n                //status\n                } else if(option_name === 'option_property_status'){\n                    operation('property');\n                    option_val == 0 ? setOptionStatus(1) : setOptionStatus(0);\n                //statusText\n                } else if(option_name === 'option_property_statusText'){\n                    operation('property');\n                    option_val == 0 ? setOptionStatusText(1) : setOptionStatusText(0);\n                //oneerror\n                } else if(option_name === 'option_property_onerror'){\n                    if(option_val == 0){\n                        setCode(code + source_code[CodeName]);\n                        setOptionOnerror(1);\n                        setPropertyCount(property_count+1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], ''));\n                        setOptionOnerror(0);\n                        setPropertyCount(property_count-1);\n                    }\n                //onloadend\n                } else if(option_name === 'option_property_onloadend'){\n                    if(option_val == 0){\n                        setCode(code + source_code[CodeName]);\n                        setOptionOnloadend(1);\n                        setPropertyCount(property_count+1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], ''));\n                        setOptionOnloadend(0);\n                        setPropertyCount(property_count-1);\n                    }\n                //abort\n                } else if(option_name === 'option_method_abort'){\n                    operation('method');\n                    if(option_val == 0){\n                        setCode(code + source_code[CodeName]);\n                        setOptionAbort(1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], ''));\n                        setOptionAbort(0);\n                    }\n                //open\n                } else if(option_name === 'option_method_open') {\n                    operation('method');\n                    if(option_val == 0){\n                        setCode(code.replace('*open_space*', 'xhr.open(\"'+option_method+'\", url);'));\n                        setOptionOpen(1);\n                    } else {\n                        setCode(code.replace('xhr.open(\"'+option_method+'\", url);', '*open_space*'));\n                        setOptionOpen(0);\n                    }\n                //send\n                } else if(option_name === 'option_method_send'){\n                    operation('method');\n                    if(option_val == 0){\n                        setCode(code.replace('*send_space*', 'xhr.send();'));\n                        setOptionSend(1);\n                    } else {\n                        setCode(code.replace('xhr.send();', '*send_space*'));\n                        setOptionSend(0);\n                    }\n                //getAllResponseHeaders\n                } else if(option_name === 'option_method_getAllResponseHeaders'){\n                    operation('method');\n                    if(option_val == 0){\n                        setOptions(options + source_code[CodeName]);\n                        setCode(code.replace(options, options + source_code[CodeName]));\n                        setOptionGetAllResponseHeaders(1);\n                    } else {\n                        setOptions(options.replace(source_code[CodeName], ''));\n                        setCode(code.replace(source_code[CodeName], ''));\n                        setOptionGetAllResponseHeaders(0);\n                    }\n                }\n            } else if(language === 'PHP'){\n                //curl_error\n                if(option_name === 'option_curl_error'){\n                    if(option_val == 0){\n                        setCode(code.replace('*curl_error*', source_code[CodeName]));\n                        setOption_curl_error(1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], '*curl_error*'));\n                        setOption_curl_error(0);\n                    }\n                } else if(option_name === 'CURLOPT_BINARYTRANSFER'){\n                    if(option_val == 0){\n                        setCode(code.replace('*curl_setopts*', source_code[CodeName]));\n                        setCURLOPT_BINARYTRANSFER(1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], '*curl_setopts*'));\n                        setCURLOPT_BINARYTRANSFER(0);\n                    }\n                } else if(option_name === 'option_curl_errno'){\n                    if(option_val == 0){\n                        setCode(code.replace('*curl_errno*', source_code[CodeName]));\n                        setOption_curl_errno(1);\n                    } else {\n                        setCode(code.replace(source_code[CodeName], '*curl_errno*'));\n                        setOption_curl_errno(0);\n                    }\n                }\n            }\n\n        /*文字列操作オプション*/\n        } else if(method === 'STR'){\n            //text設定\n            if(option_name === 'option_str_text') {\n                if ( option_str_text.length == 0 ) {\n                    setCode(code.replace('var str = \"', 'var str = \"' + option_val));\n                    setOptionStrText(option_val);\n                } else {\n                    setCode(code.replace('var str = \"' + option_str_text, 'var str = \"' + option_val));\n                    setOptionStrText(option_val);\n                }\n            //メソッド設定\n            } else if(option_name === 'option_str'){\n                CodeName = language + '_' + method + '_' + option_val;\n                setCode(source_code[CodeName]);\n                setOptionStr(option_val);\n                setCode(source_code[CodeName].replace('javascript文字列', option_str_text)); //メソッドの設定を同期\n\n            //文字列操作オプションリセット\n            } else if(option_name === 'option_str_reset') {\n                setOptionStrText('javascript文字列');\n                setOptionStr('');\n                //初期化\n                getDefaultCode(language, method);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <Grid container spacing={3} className=\"input_regular_expression\">\n                <Grid className=\"program_input_form\" item xs={5} sm={5}>\n                    {/* <h2 className=\"program_title\">プログラム生成ツール</h2> */}\n                    <Grid container spacing={3}>\n                        <Grid item xs={3} sm={3}>\n                            <span>【 言語 】</span><br/>\n                            <Radio name=\"language\" value='JavaScript' onClick={(e) => getDefaultCode('JavaScript', method, 'reset')} option=\"JavaScript\" state={language} /><br/>\n                            <Radio name=\"language\" value='PHP' onClick={(e) => getDefaultCode('PHP', method, 'reset')} option=\"PHP\" state={language} />\n                        </Grid>\n\n                        <Grid item xs={9} sm={9}>\n                            <span>【 関数 】</span><br/>\n                            <div className=\"program_scroll_form\">\n                                {language === 'JavaScript' ?\n                                    <div>\n                                        <Radio name=\"method\" value=\"Ajax\" onClick={() => getDefaultCode(language, 'Ajax', 'reset')} option=\"XMLHttpRequest\" state={method} />&nbsp;&nbsp;\n                                        <Radio name=\"method\" value=\"STR\" onClick={() => getDefaultCode(language, 'STR')} option=\"文字列操作\" state={method} />\n                                    </div>\n                                : language === 'PHP' ?\n                                    <Radio name=\"method\" value=\"Ajax\" onClick={() => getDefaultCode(language, 'Ajax', 'reset')} option=\"cURL\" state={method} />\n                                : ''\n                                }\n                                {method === 'Ajax' &&\n                                    <div className=\"program_option\">\n                                        <Radio className=\"program_radio_form\" name=\"option_method\" value=\"GET\" onClick={(e) => getOptionCode(e)} option=\"GET\" state={option_method} />\n                                        <Radio className=\"program_radio_form\" name=\"option_method\" value=\"POST\" onClick={(e) => getOptionCode(e)} option=\"POST\" state={option_method} />\n                                        <input className=\"program_option_input\" type=\"text\" name=\"option_ajax_url\" value={option_ajax_url} onChange={(e) => getOptionCode(e)} />\n\n                                        {language === 'JavaScript' ?\n                                            <div>\n                                                <Accordion>\n                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />} className=\"program_accordion_summury\">\n                                                        <Typography className=\"program_accordion_title\">Header</Typography>\n                                                        <Typography className=\"program_accordion_option_count\">{header_count}</Typography>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails className=\"program_accordion_title\">\n                                                        {language === 'JavaScript' &&\n                                                            <div>\n                                                                <CheckBox name=\"option_header_content_type_flag\" value={option_header_content_type_flag} onClick={(e) => getOptionCode(e)} option=\"Content-Type\" state={option_header_content_type_flag} /><br/>\n                                                                {option_header_content_type_flag === 1 &&\n                                                                    <input className=\"program_option_input\" type=\"text\" name=\"option_header_content_type\" value={option_header_content_type} onChange={(e) => getOptionCode(e)}/>\n                                                                }\n                                                            </div>\n                                                        }\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                                <Accordion>\n                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />} className=\"program_accordion_summury\">\n                                                        <Typography className=\"program_accordion_title\">Property</Typography>\n                                                        <Typography className=\"program_accordion_option_count\">{property_count}</Typography>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails className=\"program_accordion_title\">\n                                                        {language === 'JavaScript' &&\n                                                        <div className=\"program_accordion_titles\">\n                                                            <Details name=\"option_property_onreadystatechange\" value={option_property_onreadystatechange} onClick={(e) => getOptionCode(e)} option=\"onreadystatechange\" state={option_property_onreadystatechange} disabled={true}\n                                                                details=\"EventHandler で、 readyState 属性が変化するたびに呼び出されます。コールバックはユーザーインターフェイスのスレッドから呼び出されます。 XMLHttpRequest.onreadystatechange プロパティは、 readystatechange イベントが発生するたびに、つまり XMLHttpRequest の readyState が変化するたびに呼び出されるイベントハンドラーを保持します。\"/>\n\n                                                            <Details name=\"option_property_readyState\" value={option_property_readyState} onClick={(e) => getOptionCode(e)} option=\"readyState\" state={option_property_readyState}\n                                                                details=\"XMLHttpRequest クライアントの状態を返します。XHR クライアントは次の状態のいずれかをとります。\"/>\n\n                                                            <Details name=\"option_property_response\" value={option_property_response} onClick={(e) => getOptionCode(e)} option=\"response\" state={option_property_response}\n                                                                details=\"そのリクエストのresponseTypeによって、ArrayBuffer, Blob, Document, JavaScript Object, or DOMStringといったレスポンスのボディを返します。\"/>\n\n                                                            <Details name=\"option_property_responseText\" value={option_property_responseText} onClick={(e) => getOptionCode(e)} option=\"responseText\" state={option_property_responseText}\n                                                                details=\"送信されたリクエストに続いてサーバーから受け取ったテキストを返します。\"/>\n\n                                                            <Details name=\"option_property_status\" value={option_property_status} onClick={(e) => getOptionCode(e)} option=\"status\" state={option_property_status}\n                                                                details=\"XMLHttpRequest のレスポンスにおける数値の HTTP ステータスコードを返します。リクエストが完了する前は、 status の値は 0 になります。 XMLHttpRequest がエラーになった場合も、ブラウザーはステータスとして 0 を返します。\"\n                                                                tool_tip_str='ステータス番号を返します. (例えば \"Not Found\" を示す \"404\" か \"OK\" を示す \"200\" です)' />\n\n                                                            <Details name=\"option_property_statusText\" value={option_property_statusText} onClick={(e) => getOptionCode(e)} option=\"statusText\" state={option_property_statusText}\n                                                                details='HTTP サーバーから返ってきたレスポンス文字列が入った DOMString を返します。XMLHTTPRequest.status とは異なり、(\"200 OK\" のように) レスポンスメッセージの完全な文が含まれています。'\n                                                                tool_tip_str='ステータステキストを返します. (例えば \"Not Found\" または \"OK\")' />\n\n                                                            <Details name=\"option_property_onerror\" value={option_property_onerror} onClick={(e) => getOptionCode(e)} option=\"oneerror\" state={option_property_onerror}\n                                                                details=\"XMLHttpRequest のレスポンスにおける数値の HTTP ステータスコードを返します。リクエストが完了する前は、 status の値は 0 になります。 XMLHttpRequest がエラーになった場合も、ブラウザーはステータスとして 0 を返します。\"/>\n\n                                                            <Details name=\"option_property_onloadend\" value={option_property_onloadend} onClick={(e) => getOptionCode(e)} option=\"onloadend\" state={option_property_onloadend}\n                                                                details='ajax通信が成功か失敗に関わらず終了した時にloadendイベントが発生し、ここに設定したコールバック関数が呼び出されます。'/>\n                                                        </div>\n                                                        }\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                                <Accordion>\n                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />} className=\"program_accordion_summury\">\n                                                    <Typography className=\"program_accordion_title\">Method</Typography>\n                                                    <Typography className=\"program_accordion_option_count\">{method_count}</Typography>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails className=\"program_accordion_title\">\n                                                    {language === 'JavaScript' &&\n                                                        <div className=\"program_accordion_titles\">\n                                                            <Details name=\"option_method_open\" value={option_method_open} onClick={(e) => getOptionCode(e)} option=\"open\" state={option_method_open}\n                                                                details='新しく作成されたリクエストを初期化したり、既存のリクエストを再初期化したりします。'/>\n\n                                                            <Details name=\"option_method_send\" value={option_method_send} onClick={(e) => getOptionCode(e)} option=\"send\" state={option_method_send}\n                                                                details='リクエストをサーバーに送信します。リクエストが非同期の場合 (これが既定)、このメソッドはリクエストが送信されるとすぐに戻り、結果はイベントを用いて配信されます。リクエストが同期の場合、このメソッドはレスポンスが到着するまで戻りません。\n                                                                send() はリクエストの本文を示す引数を一つ受け取ることができます。これは主に PUT のようなリクエストに使用されます。リクエストメソッドが GET 又は HEAD であれば、 body 引数は無視され、リクエストの本文は null に設定されます。\n                                                                setRequestHeader() を使用して Accept ヘッダーを設定しなかった場合、 Accept ヘッダーは \"*/*\" 型 (任意の型) が送信されます。'/>\n\n                                                            <Details name=\"option_method_abort\" value={option_method_abort} onClick={(e) => getOptionCode(e)} option=\"abort\" state={option_method_abort}\n                                                                details='例えばプログラムが XMLHttpRequest.abort() を呼び出した時など、リクエストが中断されたときに発生します。'\n                                                                tool_tip_str=\"この例では、ある条件が発生したときに、 abort() を呼び出すことで転送を中止します。\"/>\n\n                                                            <Details name=\"option_method_getAllResponseHeaders\" value={option_method_getAllResponseHeaders} onClick={(e) => getOptionCode(e)} option=\"getAllResponseHeaders\" state={option_method_getAllResponseHeaders}\n                                                                details='すべてのレスポンスヘッダーを CRLF で区切った文字列として返し、レスポンスを受信していない場合は null を返します。ネットワークエラーが発生した場合は、空文字列が返されます。'/>\n                                                        </div>\n                                                    }\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            </div>\n                                        :\n                                            <div className=\"program_accordion_titles\">\n                                                <details className=\"program_accordion_title_details\">\n                                                        <summary className=\"program_accordion_title_summary\">\n                                                            <CheckBox name=\"option_curl_setopt\" value={option_curl_setopt} onClick={(e) => getOptionCode(e)} option=\"curl_setopt\" state={option_curl_setopt} disabled={true} />\n                                                        </summary>\n                                                        <p>cURL 転送用オプションを設定する</p>\n                                                        &nbsp;&nbsp;<CheckBox className=\"program_curl_setopt_details\" name=\"CURLOPT_BINARYTRANSFER\" value={CURLOPT_BINARYTRANSFER} onClick={(e) => getOptionCode(e)} option=\"CURLOPT_BINARYTRANSFER\" state={CURLOPT_BINARYTRANSFER} />\n                                                        <Tooltip detail=\"trueを設定すると、出力結果を何も加工せずに返します。\" />\n                                                </details>\n\n                                                <Details name=\"option_curl_error\" value={option_curl_error} onClick={(e) => getOptionCode(e)} option=\"curl_error\" state={option_curl_error}\n                                                    details='現在のセッションに関する直近のエラー文字列を返す'/>\n\n                                                <Details name=\"option_curl_errno\" value={option_curl_errno} onClick={(e) => getOptionCode(e)} option=\"curl_errno\" state={option_curl_errno}\n                                                    details='直近のエラー番号を返す'/>\n                                            </div>\n                                        }\n                                            <div className=\"option_reset_button\">\n                                                <input type=\"button\" value=\"Reset\" name=\"option_ajax_reset\" onClick={(e) => getOptionCode(e)} />\n                                            </div>\n                                        </div>\n                                    }\n\n                                    {method == 'STR' &&\n                                        <div className=\"program_option\">\n                                            <input type=\"text\" className=\"program_str_text\" name=\"option_str_text\" value={option_str_text} onChange={(e) => getOptionCode(e)} />\n                                            {language === 'JavaScript' ?\n                                                <div className=\"program_accordion_titles\">\n                                                    <details className=\"program_accordion_title_details\">\n                                                        <summary className=\"program_accordion_title_summary\">\n                                                            <Radio className=\"program_radio_form\" name=\"option_str\" value=\"substr\" onClick={(e) => getOptionCode(e)} option=\"substr\" state={option_str} />\n                                                        </summary>\n                                                        <p>文字列の一部を、指定した位置から後方向指定した文字数だけ返します。</p>\n                                                    </details>\n                                                    <details className=\"program_accordion_title_details\">\n                                                        <summary className=\"program_accordion_title_summary\">\n                                                            <Radio className=\"program_radio_form\" name=\"option_str\" value=\"substring\" onClick={(e) => getOptionCode(e)} option=\"substring\" state={option_str} />\n                                                        </summary>\n                                                        <p>string オブジェクトの開始・終了位置の間、または文字列の最後までの部分集合を返します。</p>\n                                                    </details>\n                                                    <details className=\"program_accordion_title_details\">\n                                                        <summary className=\"program_accordion_title_summary\">\n                                                            <Radio className=\"program_radio_form\" name=\"option_str\" value=\"slice\" onClick={(e) => getOptionCode(e)} option=\"slice\" state={option_str} />\n                                                        </summary>\n                                                        <p>start と end が配列の中の項目のインデックスを表している場合、start から end まで (end は含まれない) で選択された配列の一部の浅いコピーを新しい配列オブジェクトに作成して返します。元の配列は変更されません。</p>\n                                                    </details>\n                                                    <details className=\"program_accordion_title_details\">\n                                                        <summary className=\"program_accordion_title_summary\">\n                                                            <Radio className=\"program_radio_form\" name=\"option_str\" value=\"split\" onClick={(e) => getOptionCode(e)} option=\"split\" state={option_str} />\n                                                        </summary>\n                                                        <p>String を指定した区切り文字列で分割することにより、文字列の配列に分割します。</p>\n                                                    </details>\n                                                </div>\n                                                :\n                                                <div>\n\n                                                </div>\n                                            }\n                                        <input type=\"button\" value=\"Reset\" name=\"option_str_reset\" onClick={(e) => getOptionCode(e)} />\n                                    </div>\n                                }\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid className=\"program_code_form\" item xs={7} sm={7}>\n                    <div className=\"program_code_form_sub\" id=\"program_code_form_sub\">\n                    {console.log(code)}\n                        <Code code={code} language={language}></Code>\n                        <Result code={code} method={method} language={language} ></Result>\n                    </div>\n                </Grid>\n            </Grid>\n        </div>        \n    );\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/breadcrumb.jsx",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/top.js",["240","241","242","243","244","245","246"],"import React, {useState, Component,useEffect} from 'react';\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { diffDate, serverUrl } from '../../common';\nimport RigthSideList from '../parts/rightSideList';\nimport Header from '../parts/header';\nimport Sns from '../parts/sns';\nimport Breadcrumb from '../parts/breadcrumb';\nimport User from '../auth/User';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport TwitterIcon from '@material-ui/icons/Twitter';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    grid: {\n        padding: '5px !important',\n        display: 'grid !important',\n    },\n}));\n\n\nexport default function ToolsTop(props){\n    const classes = useStyles();\n\n    function componentDidMount() {\n        document.title = 'WEBツール';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n    });\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    {User.get('device') === 'pc' &&\n                        <Grid item xs={1}>\n                            <Sns />\n                        </Grid>\n                    }\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 8 : 12}>\n                        <Paper>\n                            <div className=\"page_title\">\n                                <h1>WEBツール</h1>\n                                <div className=\"update_date\">\n                                    <p>最終更新日: 2021年1月8日</p>\n                                </div>\n                            </div>\n                            <div className=\"tools\">\n                                <Link to=\"/tools/regularExpression\">\n                                    <img border=\"1px\" src=\"/regularExpression.png\" alt=\"\"/>\n                                    <p>\n                                        <span>正規表現ツール</span><br/><br/>\n                                        JavaScriptで動作する正規表現の生成/テストツールです。<br/>\n                                        ※JavaScript以外の言語では正常に動作しない可能性があります。<br/>\n                                        入力されている正規表現をmatchメソッドを実行し、マッチングした文字列を表示しています。\n                                    </p>\n                                </Link>\n                            </div>\n                            <div className=\"tools\">\n                                <Link to=\"/tools/programGenerate\">\n                                    <img border=\"1px\" src=\"/programGenerate.png\" alt=\"\"/>\n                                    <p>\n                                        <span>プログラム生成ツール</span><br/><br/>\n                                        JavaScriptで動作するプログラム生成ツールです。<br/>\n                                        設定されたコードを実行し、実行結果を表示します。<br/>\n                                    </p>\n                                </Link>\n                            </div>\n                        </Paper>\n                    </Grid>\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 3 : 12}>\n                      <Paper>\n                            <RigthSideList />\n                      </Paper>\n                    </Grid>\n              </Grid>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/portfolio.jsx",["247","248","249","250","251"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { diffDate, serverUrl } from '../../common';\nimport RigthSideList from '../parts/rightSideList';\nimport Sns from '../parts/sns';\nimport Breadcrumb from '../parts/breadcrumb';\nimport Header from '../parts/header';\nimport User from '../auth/User';\nimport {Game} from '../parts/game';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    grid: {\n        padding: '5px !important',\n        display: 'grid !important',\n    },\n    game: {height: '500px'}\n}));\n\nexport default function Top(props){\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    <Grid item xs={1} sm={1}>\n                        <Sns />\n                    </Grid>\n                    <Grid className={classes.grid} item xs={8} sm={8}>\n                        <Paper className={classes.game}>\n                            <Game />\n                        </Paper>\n                    </Grid>\n                    <Grid className={classes.grid} item xs={3} sm={3}>\n                        <Paper>\n                            <RigthSideList twitterData={props.twitterData} />\n                        </Paper>\n                    </Grid>\n              </Grid>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/post.jsx",["252"],"import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { serverUrl } from '../../common';\nimport Header from '../parts/header';\nimport Breadcrumb from '../parts/breadcrumb';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    form: {\n        width: '80%',\n        margin: '0 auto',\n    },\n}));\n\nexport default function Post(props){\n\n    const { register, handleSubmit, errors, reset } = useForm();\n    const classes = useStyles();\n    const [error, set_error] = useState('');\n    const [success_aleart, set_success_aleart] = useState('');\n\n    function post(data){\n        if(window.confirm(\"送信しますか?\")){\n            fetch(serverUrl + '/api/contact', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json',},\n                body: JSON.stringify(data),\n            })\n            .then(response => {\n                if (!response.ok) {\n                    set_error(response);\n                } else {\n                    return response.json().then(data => {\n                        console.log(data);\n                        if('errors' in data){\n                            set_error(data.errors);\n                            set_success_aleart('');\n                        } else {\n                            set_error('');\n                            set_success_aleart(data.message);\n                        }\n                    });\n                }\n            }).catch(error => {\n                set_error(error);\n            })\n        }\n    }\n\n    return(\n        <div>\n            <Header location={props}  />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <form onSubmit={handleSubmit(post)} className={classes.form}>\n\n                    {success_aleart !== '' && (\n        \t\t\t\t<Typography component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                            <Alert severity=\"success\">{success_aleart}</Alert>\n                        </Typography>\n                    )}\n                    {error !== '' && (\n                        <Typography color=\"error\" component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                            {Object.keys(error).map(key => (\n                                <Alert key={key} severity=\"error\">{error[key]}</Alert>\n                            ))}\n                        </Typography>\n                    )}\n\n                    <TextField variant=\"outlined\" name=\"email\" size=\"small\" className={classes.form_input}\n                        error={errors.email ? true : false}\n                        inputRef={register({ pattern: /^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}/ })}\n                        helperText={\n                            errors.email && <span className=\"error_message\">メールアドレスの形式が正しくありません。</span>\n                        }\n                        label={'メールアドレス(任意)'}\n                    />\n                    <TextField variant=\"outlined\" name=\"contents\" multiline rows={7} className={classes.form_input}\n                        error={errors.contents ? true : false}\n                        inputRef={register({ required: true })}\n                        helperText={\n                            errors.contents && <span className=\"error_message\">お問い合わせ内容を入力してください。</span>\n                        }\n                        label={'お問い合わせ内容'}\n                    />\n\n                    <Button onClick={handleSubmit(post)} className={classes.post_button} variant=\"contained\" color=\"primary\">\n                        送信する\n                    </Button>\n                </form>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/detailsComponent.tsx",["253"],"import * as React from 'react';\nimport { useState } from 'react';\nimport {CheckBox} from './checkboxComponent';\nimport {Table} from './tableComponent';\nimport {Tooltip} from './tooltipComponent';\n\ntype Props = {\n    name: string;\n    value: any;\n    onClick: any;\n    option: string;\n    state?: any;\n    details?: any;\n    disabled?: boolean;\n    tool_tip_str?: string;\n}\n\nexport var Details: React.FC<Props> = ({name, value, onClick, option, state = null, details = null, disabled = false, tool_tip_str = ''}) => {\n    return(\n        <details className=\"program_accordion_title_details\">\n            <summary className=\"program_accordion_title_summary\">\n                <CheckBox name={name} value={value} onClick={onClick} option={option} state={state} disabled={disabled} />\n                {tool_tip_str.length > 0 && <Tooltip detail={tool_tip_str} />}\n            </summary>\n            <p>{details}</p>\n            {name === 'option_property_readyState' && <Table />}\n        </details>\n    )\n}",["254","255"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/tooltipComponent.tsx",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/parts/game.jsx",["256"],"import React, { FC } from \"react\";\nimport Unity, { UnityContent } from \"react-unity-webgl\";\n \nconst unityContent = new UnityContent(\n    \"/Build/2D_Action_Game.json\",\n    \"/Build/UnityLoader.js\",\n);\n \nexport const Game = () => {\n  return <Unity unityContent={unityContent} />;\n};","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/resultComponent.tsx",["257","258","259","260","261"],"import * as React from 'react';\nimport { useState } from 'react';\nimport Clipboard from 'react-clipboard.js';\n\nimport Grid from '@material-ui/core/Grid';\n\ntype Props = {\n    code: string;\n    method: string;\n    language: string;\n}\n\nexport const Result: React.FC<Props> = ({code, method, language}) => {\n\n    const [resultCode, setResultCode] = useState([]);\n    const [oonloadendCode, setOonloadendCode] = useState('');\n    const [errorCode, setErrorCode] = useState([]);\n    const [copyButtontitle, setCopyButtontitle] = useState('Copy');\n    const [processingTime, setProcessingTime] = useState(0);\n\n    const closure = `\n    (function (data) {\n        return data;\n    }(result));`;\n    //返り値取得の為即時関数をつける / 整形もする\n    var after_code = '';\n    var run_code = '';\n\n    if(language === 'JavaScript'){\n        after_code = code.replace('*send_space*', '').replace('*open_space*', '').replace('*result_space*', '');\n        run_code = method === 'STR' ? code + closure : after_code.replace('*setResultCode_space*', 'setResultCode(result)').replace('*setOnloadendCode_space*', 'setOonloadendCode(onloadend)').replace('*setErrorCode_space*', 'setErrorCode(errors)');\n    } else if(language === 'PHP'){\n        after_code = code.replace('*method*', '').replace('*curl_setopts*', '').replace('*curl_error*', '').replace('*curl_errno*', '').trim();\n        run_code = after_code;\n    }\n\n    function changeCopyButtontitle(){\n        setCopyButtontitle('Copied');\n        setTimeout(() => {\n            setCopyButtontitle('Copy')\n        }, 700);\n    }\n\n    function run(run_code: string){\n        //始まりの時間を記録\n        var start = performance.now();\n        if(language === 'JavaScript'){\n            setResultCode(eval(run_code))\n        } else {\n            var result: string = '';\n            var formData = new FormData() ;\n            formData.append( 'run_code', run_code ) ;\n\n            var xhr = new XMLHttpRequest();\n            var url = \"https://kudohayatoblog.com/api/run_php\";\n            xhr.open(\"POST\", url);\n            xhr.send(formData);\n\n            xhr.onreadystatechange = function () {\n                if(xhr.readyState === xhr.DONE) {\n                    if (xhr.status >= 200 && xhr.status < 400) {\n                        setResultCode(xhr.response);\n                    }\n                }\n            };\n        }\n        //終わりの時間を記録\n        var end = performance.now();\n        setProcessingTime(end - start);\n    }\n\n    function reset(){\n        setResultCode([]);\n        setErrorCode([]);\n        setOonloadendCode('');\n        setProcessingTime(0);\n    }\n\n    return (\n        <Grid container spacing={3} className=\"input_regular_expression\">\n            <Grid item xs={2} sm={2}>\n                <button className=\"program_run_button\" onClick={() => run(run_code)}>Run</button>\n                <button className=\"program_reset_button\" onClick={() => reset()}>Reset</button>\n            </Grid>\n            <Grid item xs={10} sm={10}>\n            <pre className=\"prettyprint linenums lang-js program_result_form\">\n                    <code className=\"program_btn\">\n                        <span>処理時間: {processingTime} ms</span>\n                        <Clipboard className=\"copy_btn\" data-clipboard-text={resultCode} onClick={() => changeCopyButtontitle()}>{copyButtontitle}</Clipboard>\n                    </code>\n                    {Object.keys(errorCode).map(key => {\n                        return(\n                            errorCode[key] != '' &&\n                            <div key={key}>\n                                <code className=\"program_error_code\">{'>  '}</code>\n                                <code className=\"program_error_code\">{errorCode[key]}</code>\n                            </div>\n                        )\n                    })}\n                    {Array.isArray(resultCode) ?\n                        Object.keys(resultCode).map(key => {\n                            if(resultCode[key] == ''){\n                                return;\n                            }\n                            return(\n                                <div key={key}>\n                                    <code className=\"program_result_code\">{'>  '}</code>\n                                    <code className=\"program_result_code\">{resultCode[key]}</code>\n                                </div>\n                            )\n                        })\n                    :\n                        <div>\n                            <code className=\"program_result_code\">{'>  '}</code>\n                            <code className=\"program_result_code\">{resultCode}</code>\n                        </div>\n                    }\n                    {\n                        Object.keys(oonloadendCode).map(key => {\n                            return(\n                                <div key={key}>\n                                    <code className=\"program_result_code\">{'>  '}</code>\n                                    <code className=\"program_result_code\">{oonloadendCode[key]}</code>\n                                </div>\n                            )\n                        })\n                    }\n                </pre>\n            </Grid>\n        </Grid>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/codeComponent.tsx",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/blog/react_unity.jsx",["262","263","264","265"],"import React, {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { diffDate, serverUrl } from '../../common';\nimport RigthSideList from '../parts/rightSideList';\nimport Sns from '../parts/sns';\nimport Breadcrumb from '../parts/breadcrumb';\nimport Header from '../parts/header';\nimport User from '../auth/User';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    grid: {\n        padding: '5px !important',\n    },\n}));\n\nexport default function ReactUnity(props){\n\n    function componentDidMount() {\n        document.title = 'react-unity-webglでReact × Unityを動かす方法';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n    });\n\n    const classes = useStyles();\n    const code =\n`import React from \"react\";\nimport Unity, { UnityContent } from \"react-unity-webgl\";\n\nconst unityContent = new UnityContent(\n    \"/Build/2D_Action_Game.json\",\n    \"/Build/UnityLoader.js\",\n);\n\nexport const Game = () => {\n    return <Unity unityContent={unityContent} />;\n};`;\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    {User.get('device') === 'pc' &&\n                        <Grid item xs={1}>\n                            <Sns />\n                        </Grid>\n                    }\n                    <Grid item className={classes.grid} xs={User.get('device') === 'pc' ? 8 : 12}>\n                        <Paper>\n                            <div className=\"page_title\">\n                                <h1>react-unity-webglでReact × Unityを動かす方法</h1>\n                                <div className=\"update_date\"><p>投稿日: 2021年1月8日</p></div>\n\n                                <h2>目的</h2>\n                                <p className=\"blog_p\">UnityをWebGL形式で出力し、React上で動かす</p>\n                                <Link to=\"/blog/reactUnity_sample\">2Dアクションゲームのサンプル</Link>\n\n                                <h3>使用環境</h3>\n                                <ul>\n                                    <li>React (17.0.1)</li>\n                                    <li>Unity (2019.419f1)</li>\n                                    <li>react-unity-webgl</li>\n                                </ul>\n\n                                <h3>手順</h3>\n                                <h4>1.react-unity-webglインストール</h4>\n                                <p className=\"blog_p\">\n                                    Unityのバージョンに対応するパッケージをダウンロード<br/>\n                                    ※Unityのバージョンは、【HELP → Check for Updates】もしくは【Unity Hub】から確認できます。\n                                </p>\n                                <pre className=\"prettyprint linenums lang-js blog_code\">\n                                    <code>$ npm install react-unity-webgl@8.x  # For Unity 2020 and 2021 </code><br/>\n                                    <code>$ npm install react-unity-webgl@7.x  # For Unity 2018 and 2019 (LTS) </code><br/>\n                                    <code>$ npm install react-unity-webgl@6.x  # For Unity 2017 (LTS) </code><br/>\n                                    <code>$ npm install react-unity-webgl@5.x  # For Unity 5.6 (LTS) </code>\n                                </pre>\n                                <a href=\"https://github.com/elraccoone/react-unity-webgl\">公式GitHub</a>\n\n                                <h4>2.UnityをWebGL形式でビルド</h4>\n                                <ul className=\"blog_ul\">\n                                    <li>【File → Build Settings】からビルドページを開く</li>\n                                    <li>Platformから「WebGL」を選択し、Switch Platformを押す。</li>\n                                    <li>ビルド対象シーンを選択し、Build実行</li>\n                                </ul>\n                                <span>参考: </span><a href=\"https://blog.naichilab.com/entry/2017/04/29/125527\">【unity】WebGLビルド方法 - naichi's lab</a>\n                                <p className=\"blog_p\">\n                                    ビルドされたディレクトリから、「Build」ディレクトリを確認してください。画像のような構造になっているかと思います。<br/>\n                                    このBuildディレクトリを、Reactプロジェクトのpublicフォルダーに置いてください。\n                                </p>\n                                <img className=\"blog_img\" src=\"/React_Unity.png\" alt=\"\"/>\n\n                                <h4>3.React側でUnityオブジェクトの作成</h4>\n                                <p className=\"blog_p\">\n                                    UnityWebGLライブラリからUnityおよびUnityContentクラスをインポート、<br/>\n                                    新しいコンテンツオブジェクトを作成し、レンダリング関数で割り当てます。\n                                </p>\n                                <pre className=\"prettyprint linenums lang-js blog_code\">\n                                    <code>{code}</code>\n                                </pre>\n\n                                <h3>終わり</h3>\n                                <p className=\"blog_p\">\n                                    ここまでお疲れ様でした。<br/>\n                                    ReactでUnityを扱えるって燃えませんか？私は燃えました。<br/>\n                                    便利なパッケージを作ってくれた方に感謝です！\n                                </p>\n\n                            </div>\n                        </Paper>\n                    </Grid>\n                    <Grid item className={classes.grid} xs={User.get('device') === 'pc' ? 3 : 12}>\n                        <Paper>\n                            <RigthSideList twitterData={props.twitterData} />\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/blog/reactUnity_sample.jsx",["266","267","268","269"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { diffDate, serverUrl } from '../../common';\nimport RigthSideList from '../parts/rightSideList';\nimport Sns from '../parts/sns';\nimport Breadcrumb from '../parts/breadcrumb';\nimport Header from '../parts/header';\nimport User from '../auth/User';\nimport {Game} from '../parts/game';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    grid: {\n        padding: '5px !important',\n        display: 'grid !important',\n    },\n    game: {height: '500px'}\n}));\n\nexport default function ReactUnity_sample(props){\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    {User.get('device') === 'pc' &&\n                        <Grid item xs={1}>\n                            <Sns />\n                        </Grid>\n                    }\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 8 : 12}>\n                        <Paper className={classes.game}>\n                            <Game />\n                        </Paper>\n                    </Grid>\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 3 : 12}>\n                        <Paper>\n                            <RigthSideList twitterData={props.twitterData} />\n                        </Paper>\n                    </Grid>\n              </Grid>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/blog/top.jsx",["270","271","272","273"],"import React, {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { diffDate, serverUrl } from '../../common';\nimport RigthSideList from '../parts/rightSideList';\nimport Sns from '../parts/sns';\nimport Breadcrumb from '../parts/breadcrumb';\nimport Header from '../parts/header';\nimport User from '../auth/User';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: '0 auto',\n        marginTop: '20px',\n        padding: '15px',\n    },\n    grid: {\n        padding: '5px !important',\n        display: 'grid !important',\n    },\n}));\n\nexport default function BlogTop(props){\n\n    const classes = useStyles();\n\n    function componentDidMount() {\n        document.title = '駆け出しエンジニアの開発ブログ';\n    }\n\n    useEffect(() => {\n        componentDidMount();\n    });\n\n    return (\n        <div>\n            <Header location={props} />\n            <Breadcrumb location={props} />\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    {User.get('device') === 'pc' &&\n                        <Grid item xs={1} sm={1}>\n                            <Sns />\n                        </Grid>\n                    }\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 8 : 12}>\n                        <Paper>\n                            <div className=\"page_title\">\n                                <h1>ブログ</h1>\n                                <div className=\"update_date\">\n                                    <p>最終更新日: 2021年1月8日</p>\n                                </div>\n                                <div className=\"articles\">\n                                    <div className=\"article\">\n                                        <span className=\"create_date\">2020-08-15: </span>\n                                        <Link className=\"article_url\" to=\"/blog/reactUnity\">react-unity-webglでReact × Unityを動かす方法</Link>\n                                    </div>\n                                </div>\n                            </div>\n                        </Paper>\n                    </Grid>\n                    <Grid className={classes.grid} item xs={User.get('device') === 'pc' ? 3 : 12}>\n                        <Paper>\n                            <RigthSideList twitterData={props.twitterData} />\n                        </Paper>\n                    </Grid>\n              </Grid>\n            </div>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/checkboxComponent.tsx",["274"],"import * as React from 'react';\nimport { useState } from 'react';\n\ntype Props = {\n    className?: string;\n    name?: string;\n    value?: any;\n    onClick?: any;\n    option?: string;\n    state?: any;\n    disabled?: boolean;\n}\n\nexport const CheckBox: React.FC<Props> = ({className = '', name, value, onClick, option, state = null, disabled = false}) => {\n    const [checked, setChecked] = useState(state);\n    //onChangeはエラー回避のためのダミー\n    function checkedManagement(state: boolean){\n        if(state){\n            setChecked(false);\n        } else {\n            setChecked(true);\n        }\n    }\n    return(\n        <label className={className}>\n            <input type=\"checkbox\" name={name} value={value} onClick={onClick} onChange={() => checkedManagement(state)} checked={state} disabled={disabled} />&nbsp;\n            <span>{option}</span>\n        </label>\n    )\n}",["275","276"],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/components/tableComponent.tsx",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/tools/source_code.tsx",[],"/Users/kudouhayato/Desktop/project/new_blog_ts/src/component/page/admin.jsx",["277","278"],{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"284","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":14},{"ruleId":"283","severity":1,"message":"287","line":15,"column":8,"nodeType":"285","messageId":"286","endLine":15,"endColumn":12},{"ruleId":"279","replacedBy":"288"},{"ruleId":"281","replacedBy":"289"},{"ruleId":"283","severity":1,"message":"284","line":5,"column":8,"nodeType":"285","messageId":"286","endLine":5,"endColumn":14},{"ruleId":"283","severity":1,"message":"290","line":15,"column":8,"nodeType":"285","messageId":"286","endLine":15,"endColumn":18},{"ruleId":"283","severity":1,"message":"291","line":63,"column":12,"nodeType":"285","messageId":"286","endLine":63,"endColumn":29},{"ruleId":"283","severity":1,"message":"292","line":63,"column":31,"nodeType":"285","messageId":"286","endLine":63,"endColumn":52},{"ruleId":"279","replacedBy":"293"},{"ruleId":"281","replacedBy":"294"},{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"295","line":3,"column":20,"nodeType":"285","messageId":"286","endLine":3,"endColumn":29},{"ruleId":"283","severity":1,"message":"296","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":16},{"ruleId":"283","severity":1,"message":"297","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":16},{"ruleId":"283","severity":1,"message":"298","line":9,"column":8,"nodeType":"285","messageId":"286","endLine":9,"endColumn":11},{"ruleId":"283","severity":1,"message":"299","line":10,"column":8,"nodeType":"285","messageId":"286","endLine":10,"endColumn":15},{"ruleId":"283","severity":1,"message":"300","line":93,"column":12,"nodeType":"285","messageId":"286","endLine":93,"endColumn":21},{"ruleId":"283","severity":1,"message":"301","line":93,"column":23,"nodeType":"285","messageId":"286","endLine":93,"endColumn":36},{"ruleId":"283","severity":1,"message":"302","line":108,"column":14,"nodeType":"285","messageId":"286","endLine":108,"endColumn":23},{"ruleId":"303","severity":1,"message":"304","line":213,"column":49,"nodeType":"305","messageId":"306","endLine":213,"endColumn":51},{"ruleId":"303","severity":1,"message":"304","line":218,"column":50,"nodeType":"305","messageId":"306","endLine":218,"endColumn":52},{"ruleId":"303","severity":1,"message":"304","line":226,"column":53,"nodeType":"305","messageId":"306","endLine":226,"endColumn":55},{"ruleId":"283","severity":1,"message":"307","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"308","line":3,"column":10,"nodeType":"285","messageId":"286","endLine":3,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":3,"column":20,"nodeType":"285","messageId":"286","endLine":3,"endColumn":29},{"ruleId":"283","severity":1,"message":"309","line":12,"column":8,"nodeType":"285","messageId":"286","endLine":12,"endColumn":18},{"ruleId":"283","severity":1,"message":"310","line":16,"column":8,"nodeType":"285","messageId":"286","endLine":16,"endColumn":17},{"ruleId":"283","severity":1,"message":"311","line":19,"column":8,"nodeType":"285","messageId":"286","endLine":19,"endColumn":18},{"ruleId":"283","severity":1,"message":"284","line":6,"column":8,"nodeType":"285","messageId":"286","endLine":6,"endColumn":14},{"ruleId":"283","severity":1,"message":"312","line":12,"column":8,"nodeType":"285","messageId":"286","endLine":12,"endColumn":24},{"ruleId":"283","severity":1,"message":"313","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":16},{"ruleId":"283","severity":1,"message":"314","line":61,"column":11,"nodeType":"285","messageId":"286","endLine":61,"endColumn":18},{"ruleId":"283","severity":1,"message":"315","line":64,"column":19,"nodeType":"285","messageId":"286","endLine":64,"endColumn":28},{"ruleId":"283","severity":1,"message":"316","line":1,"column":27,"nodeType":"285","messageId":"286","endLine":1,"endColumn":34},{"ruleId":"283","severity":1,"message":"317","line":46,"column":45,"nodeType":"285","messageId":"286","endLine":46,"endColumn":50},{"ruleId":"318","severity":1,"message":"319","line":129,"column":11,"nodeType":"285","messageId":"286","endLine":129,"endColumn":17},{"ruleId":"320","severity":1,"message":"321","line":351,"column":37,"nodeType":"322","endLine":351,"endColumn":52},{"ruleId":"320","severity":1,"message":"321","line":352,"column":37,"nodeType":"322","endLine":352,"endColumn":52},{"ruleId":"320","severity":1,"message":"321","line":353,"column":37,"nodeType":"322","endLine":353,"endColumn":52},{"ruleId":"279","replacedBy":"288"},{"ruleId":"281","replacedBy":"289"},{"ruleId":"283","severity":1,"message":"323","line":5,"column":9,"nodeType":"285","messageId":"286","endLine":5,"endColumn":20},{"ruleId":"318","severity":1,"message":"324","line":16,"column":12,"nodeType":"285","messageId":"286","endLine":16,"endColumn":19},{"ruleId":"279","replacedBy":"293"},{"ruleId":"281","replacedBy":"294"},{"ruleId":"325","severity":1,"message":"326","line":82,"column":61,"nodeType":"305","messageId":"327","endLine":82,"endColumn":62},{"ruleId":"303","severity":1,"message":"328","line":84,"column":23,"nodeType":"305","messageId":"306","endLine":84,"endColumn":25},{"ruleId":"303","severity":1,"message":"328","line":139,"column":31,"nodeType":"305","messageId":"306","endLine":139,"endColumn":33},{"ruleId":"303","severity":1,"message":"328","line":149,"column":31,"nodeType":"305","messageId":"306","endLine":149,"endColumn":33},{"ruleId":"303","severity":1,"message":"328","line":173,"column":45,"nodeType":"305","messageId":"306","endLine":173,"endColumn":47},{"ruleId":"303","severity":1,"message":"328","line":182,"column":31,"nodeType":"305","messageId":"306","endLine":182,"endColumn":33},{"ruleId":"303","severity":1,"message":"328","line":202,"column":35,"nodeType":"305","messageId":"306","endLine":202,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":214,"column":32,"nodeType":"305","messageId":"306","endLine":214,"endColumn":34},{"ruleId":"303","severity":1,"message":"328","line":218,"column":32,"nodeType":"305","messageId":"306","endLine":218,"endColumn":34},{"ruleId":"303","severity":1,"message":"328","line":222,"column":32,"nodeType":"305","messageId":"306","endLine":222,"endColumn":34},{"ruleId":"303","severity":1,"message":"328","line":226,"column":32,"nodeType":"305","messageId":"306","endLine":226,"endColumn":34},{"ruleId":"303","severity":1,"message":"328","line":230,"column":32,"nodeType":"305","messageId":"306","endLine":230,"endColumn":34},{"ruleId":"303","severity":1,"message":"328","line":233,"column":35,"nodeType":"305","messageId":"306","endLine":233,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":244,"column":35,"nodeType":"305","messageId":"306","endLine":244,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":256,"column":35,"nodeType":"305","messageId":"306","endLine":256,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":266,"column":35,"nodeType":"305","messageId":"306","endLine":266,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":276,"column":35,"nodeType":"305","messageId":"306","endLine":276,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":286,"column":35,"nodeType":"305","messageId":"306","endLine":286,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":299,"column":35,"nodeType":"305","messageId":"306","endLine":299,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":307,"column":35,"nodeType":"305","messageId":"306","endLine":307,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":315,"column":35,"nodeType":"305","messageId":"306","endLine":315,"endColumn":37},{"ruleId":"303","severity":1,"message":"328","line":329,"column":45,"nodeType":"305","messageId":"306","endLine":329,"endColumn":47},{"ruleId":"303","severity":1,"message":"328","line":491,"column":45,"nodeType":"305","messageId":"306","endLine":491,"endColumn":47},{"ruleId":"283","severity":1,"message":"307","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"329","line":1,"column":26,"nodeType":"285","messageId":"286","endLine":1,"endColumn":35},{"ruleId":"283","severity":1,"message":"308","line":4,"column":10,"nodeType":"285","messageId":"286","endLine":4,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":4,"column":20,"nodeType":"285","messageId":"286","endLine":4,"endColumn":29},{"ruleId":"283","severity":1,"message":"309","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":18},{"ruleId":"283","severity":1,"message":"330","line":14,"column":8,"nodeType":"285","messageId":"286","endLine":14,"endColumn":22},{"ruleId":"283","severity":1,"message":"331","line":15,"column":8,"nodeType":"285","messageId":"286","endLine":15,"endColumn":19},{"ruleId":"283","severity":1,"message":"307","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"308","line":3,"column":10,"nodeType":"285","messageId":"286","endLine":3,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":3,"column":20,"nodeType":"285","messageId":"286","endLine":3,"endColumn":29},{"ruleId":"283","severity":1,"message":"332","line":8,"column":8,"nodeType":"285","messageId":"286","endLine":8,"endColumn":12},{"ruleId":"283","severity":1,"message":"309","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":18},{"ruleId":"283","severity":1,"message":"317","line":28,"column":45,"nodeType":"285","messageId":"286","endLine":28,"endColumn":50},{"ruleId":"318","severity":1,"message":"307","line":2,"column":10,"nodeType":"285","messageId":"286","endLine":2,"endColumn":18},{"ruleId":"279","replacedBy":"333"},{"ruleId":"281","replacedBy":"334"},{"ruleId":"283","severity":1,"message":"335","line":1,"column":17,"nodeType":"285","messageId":"286","endLine":1,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":48,"column":27,"nodeType":"338","messageId":"306","endLine":48,"endColumn":31},{"ruleId":"318","severity":1,"message":"339","line":50,"column":17,"nodeType":"285","messageId":"286","endLine":50,"endColumn":31},{"ruleId":"303","severity":1,"message":"304","line":93,"column":44,"nodeType":"305","messageId":"306","endLine":93,"endColumn":46},{"ruleId":"303","severity":1,"message":"328","line":102,"column":48,"nodeType":"305","messageId":"306","endLine":102,"endColumn":50},{"ruleId":"340","severity":1,"message":"341","line":103,"column":33,"nodeType":"342","messageId":"343","endLine":103,"endColumn":40},{"ruleId":"283","severity":1,"message":"307","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"308","line":4,"column":10,"nodeType":"285","messageId":"286","endLine":4,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":4,"column":20,"nodeType":"285","messageId":"286","endLine":4,"endColumn":29},{"ruleId":"283","severity":1,"message":"309","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":18},{"ruleId":"283","severity":1,"message":"307","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"308","line":3,"column":10,"nodeType":"285","messageId":"286","endLine":3,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":3,"column":20,"nodeType":"285","messageId":"286","endLine":3,"endColumn":29},{"ruleId":"283","severity":1,"message":"309","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":18},{"ruleId":"283","severity":1,"message":"307","line":1,"column":16,"nodeType":"285","messageId":"286","endLine":1,"endColumn":24},{"ruleId":"283","severity":1,"message":"308","line":4,"column":10,"nodeType":"285","messageId":"286","endLine":4,"endColumn":18},{"ruleId":"283","severity":1,"message":"295","line":4,"column":20,"nodeType":"285","messageId":"286","endLine":4,"endColumn":29},{"ruleId":"283","severity":1,"message":"309","line":13,"column":8,"nodeType":"285","messageId":"286","endLine":13,"endColumn":18},{"ruleId":"318","severity":1,"message":"324","line":15,"column":12,"nodeType":"285","messageId":"286","endLine":15,"endColumn":19},{"ruleId":"279","replacedBy":"344"},{"ruleId":"281","replacedBy":"345"},{"ruleId":"283","severity":1,"message":"307","line":1,"column":17,"nodeType":"285","messageId":"286","endLine":1,"endColumn":25},{"ruleId":"283","severity":1,"message":"295","line":2,"column":10,"nodeType":"285","messageId":"286","endLine":2,"endColumn":19},"no-native-reassign",["346"],"no-negated-in-lhs",["347"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.",["346"],["347"],"'IconButton' is defined but never used.","'selected_platform' is assigned a value but never used.","'set_selected_platform' is assigned a value but never used.",["346"],["347"],"'serverUrl' is defined but never used.","'ToolsTop' is defined but never used.","'TabPanel' is defined but never used.","'Top' is defined but never used.","'Contact' is defined but never used.","'tab_value' is assigned a value but never used.","'set_tab_value' is assigned a value but never used.","'a11yProps' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","'diffDate' is defined but never used.","'Typography' is defined but never used.","'Portfolio' is defined but never used.","'MenuAppBar' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'history' is assigned a value but never used.","'set_error' is assigned a value but never used.","'useMemo' is defined but never used.","'reset' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'styles' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'twitterData' is assigned a value but never used.","'checked' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","Expected '===' and instead saw '=='.","'Component' is defined but never used.","'ArrowRightIcon' is defined but never used.","'TwitterIcon' is defined but never used.","'User' is defined but never used.",["346"],["347"],"'FC' is defined but never used.","no-eval","eval can be harmful.","CallExpression","'result' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",["346"],["347"],"no-global-assign","no-unsafe-negation"]